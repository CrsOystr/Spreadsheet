// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UnitTests_Spreadsheet
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Tried an extensive capture test without any assertions.
        /// </summary>
        public void RecordedAttemptNumber35()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIUntitledssSpreadsheeWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UIUntitledssSpreadsheeWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinMenuItem uIHelpMenuItem = this.UIUntitledssSpreadsheeWindow.UIMenuStripMenuBar.UIHelpMenuItem;
            WinButton uIOKButton1 = this.UIInstructionsWindow.UIOKWindow.UIOKButton;
            WinEdit uIContentTextBoxEdit1 = this.UIUntitledssSpreadsheeWindow1.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinButton uIYesButton = this.UIWaitasecWindow.UIYesWindow.UIYesButton;
            WinButton uINOButton = this.UIWaitasecWindow.UINOWindow.UINOButton;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UINewssListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinMenuItem uIOpenInNewWindowMenuItem = this.UIUntitledssSpreadsheeWindow.UIMenuStripMenuBar.UIFileMenuItem.UIOpenInNewWindowMenuItem;
            WinButton uICancelButton = this.UIOpenWindow.UICancelWindow.UICancelButton;
            WinSplitButton uIOpenSplitButton1 = this.UIOpenWindow.UIOpenWindow2.UIOpenSplitButton;
            WinEdit uIContentTextBoxEdit2 = this.UINewssSpreadsheetWindow.UIItem1Window.UIContentTextBoxEdit;
            WinMenuItem uIOpenCtrlOMenuItem = this.UINewssSpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UIOpenCtrlOMenuItem;
            WinSplitButton uIOpenSplitButton2 = this.UIOpenWindow.UIOpenWindow3.UIOpenSplitButton;
            WinMenuItem uISaveAsMenuItem = this.UINewssSpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinControl uIItemImage = this.UISaveAsWindow.UIItemWindow1.UINewssListItem.UIItemImage;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton1 = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinMenuItem uISaveCtrlSMenuItem = this.UINewssSpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UISaveCtrlSMenuItem;
            WinMenuItem uIFileMenuItem = this.UINewssSpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem;
            WinControl uIItemImage1 = this.UISaveAsWindow.UIItemWindow2.UINewssListItem.UIItemImage;
            WinMenuItem uICloseAltF4MenuItem = this.UINewssSpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UICloseAltF4MenuItem;
            WinMenuItem uIOpenCtrlOMenuItem1 = this.UIUntitledssSpreadsheeWindow.UIMenuStripMenuBar.UIFileMenuItem.UIOpenCtrlOMenuItem;
            WinMenuItem uINewCtrlNMenuItem = this.UIUntitledssSpreadsheeWindow.UIMenuStripMenuBar.UIFileMenuItem.UINewCtrlNMenuItem;
            WinMenuItem uIDeleteMenuItem = this.UIItemWindow.UIContextMenu.UIDeleteMenuItem;
            WinButton uIYesButton2 = this.UIDeleteFileWindow.UIYesWindow.UIYesButton;
            WinButton uICloseButton = this.UIUntitledssSpreadsheeWindow.UINewssSpreadsheetTitleBar.UICloseButton;
            WinMenuItem uISaveCtrlSMenuItem1 = this.UIUntitledssSpreadsheeWindow.UIMenuStripMenuBar.UIFileMenuItem.UISaveCtrlSMenuItem;
            WinButton uICancelButton1 = this.UISaveAsWindow.UICancelWindow.UICancelButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIUntitledssSpreadsheeWindow = ApplicationUnderTest.Launch(this.RecordedAttemptNumber35Params.UIUntitledssSpreadsheeWindowExePath, this.RecordedAttemptNumber35Params.UIUntitledssSpreadsheeWindowAlternateExePath);

            // Type '1' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.RecordedAttemptNumber35Params.UIContentTextBoxEditText;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(143, 45));

            // Type '2' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.RecordedAttemptNumber35Params.UIContentTextBoxEditText1;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(227, 31));

            // Type '3' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.RecordedAttemptNumber35Params.UIContentTextBoxEditText2;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(75, 64));

            // Type '=A1' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.RecordedAttemptNumber35Params.UIContentTextBoxEditText3;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(134, 60));

            // Type '=A2+1' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.RecordedAttemptNumber35Params.UIContentTextBoxEditText4;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(215, 62));

            // Type '=(' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.RecordedAttemptNumber35Params.UIContentTextBoxEditText5;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys3, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.RecordedAttemptNumber35Params.UIOKButtonSendKeys, ModifierKeys.None);

            // Type '=c2' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.RecordedAttemptNumber35Params.UIContentTextBoxEditText6;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys4, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.RecordedAttemptNumber35Params.UIOKButtonSendKeys1, ModifierKeys.None);

            // Type '1' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.RecordedAttemptNumber35Params.UIContentTextBoxEditText7;

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(33, 7));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(55, 13));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(19, 8));

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton1, this.RecordedAttemptNumber35Params.UIOKButtonSendKeys2, ModifierKeys.None);

            // Type 'Control + n' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys5, ModifierKeys.Control);

            // Type 'Alt + {F4}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit1, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys6, ModifierKeys.Alt);

            // Type 'Control + n' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys7, ModifierKeys.Control);

            // Type '1' in 'contentTextBox' text box
            uIContentTextBoxEdit1.Text = this.RecordedAttemptNumber35Params.UIContentTextBoxEditText8;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit1, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys8, ModifierKeys.None);

            // Type 'Alt + {F4}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit1, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys9, ModifierKeys.Alt);

            // Type '{Right}' in '&Yes' button
            Keyboard.SendKeys(uIYesButton, this.RecordedAttemptNumber35Params.UIYesButtonSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '&No' button
            Keyboard.SendKeys(uINOButton, this.RecordedAttemptNumber35Params.UINOButtonSendKeys, ModifierKeys.None);

            // Type 'Alt + {F4}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit1, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys10, ModifierKeys.Alt);

            // Type '{Enter}' in '&Yes' button
            Keyboard.SendKeys(uIYesButton, this.RecordedAttemptNumber35Params.UIYesButtonSendKeys1, ModifierKeys.None);

            // Type 'Control + s' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys11, ModifierKeys.Control);

            // Select 'new' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedAttemptNumber35Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedAttemptNumber35Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Type 'Control + o' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys12, ModifierKeys.Control);

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(7, 18));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(46, 10));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(57, 12));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(7, 0));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(40, 13));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(62, 11));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(6, 7));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton1, new Point(17, 17));

            // Type '2' in 'contentTextBox' text box
            uIContentTextBoxEdit2.Text = this.RecordedAttemptNumber35Params.UIContentTextBoxEditText9;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit2, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys13, ModifierKeys.None);

            // Click 'File' -> 'Open (Ctrl+O)' menu item
            Mouse.Click(uIOpenCtrlOMenuItem, new Point(29, 14));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(6, 8));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton2, new Point(52, 12));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(35, 9));

            // Type 'Control + s' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit2, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys14, ModifierKeys.Control);

            // Click 'File' -> 'Save As...' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(40, 15));

            // Click image
            Mouse.Click(uIItemImage, new Point(8, 7));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(49, 15));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(33, 12));

            // Type '3' in 'contentTextBox' text box
            uIContentTextBoxEdit2.Text = this.RecordedAttemptNumber35Params.UIContentTextBoxEditText10;

            // Click 'File' -> 'Save (Ctrl+S)' menu item
            Mouse.Click(uISaveCtrlSMenuItem, new Point(31, 5));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(25, 8));

            // Click 'contentTextBox' text box
            Mouse.Click(uIContentTextBoxEdit2, new Point(28, 9));

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit2, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys15, ModifierKeys.None);

            // Click 'File' -> 'Save As...' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(50, 15));

            // Click image
            Mouse.Click(uIItemImage1, new Point(12, 13));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(33, 7));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(28, 2));

            // Type '4' in 'contentTextBox' text box
            uIContentTextBoxEdit2.Text = this.RecordedAttemptNumber35Params.UIContentTextBoxEditText11;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit2, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys16, ModifierKeys.None);

            // Click 'File' -> 'Close (Alt+F4)' menu item
            Mouse.Click(uICloseAltF4MenuItem, new Point(45, 15));

            // Type '{Enter}' in '&Yes' button
            Keyboard.SendKeys(uIYesButton, this.RecordedAttemptNumber35Params.UIYesButtonSendKeys2, ModifierKeys.None);

            // Click 'File' -> 'Open (Ctrl+O)' menu item
            Mouse.Click(uIOpenCtrlOMenuItem1, new Point(33, 13));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(5, 7));

            // Click 'File' -> 'New (Ctrl+N)' menu item
            Mouse.Click(uINewCtrlNMenuItem, new Point(24, 11));

            // Click 'File' -> 'Open (Ctrl+O)' menu item
            Mouse.Click(uIOpenCtrlOMenuItem1, new Point(29, 11));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(0, 12));

            // Right-Click 'Name' text box
            Mouse.Click(uINameEdit, MouseButtons.Right, ModifierKeys.None, new Point(0, 11));

            // Click 'Delete' menu item
            Mouse.Click(uIDeleteMenuItem, new Point(62, 17));

            // Click '&Yes' button
            Mouse.Click(uIYesButton2, new Point(37, 10));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(30, 6));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(14, 5));

            // Click 'File' -> 'Save (Ctrl+S)' menu item
            Mouse.Click(uISaveCtrlSMenuItem1, new Point(39, 2));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton1, new Point(61, 10));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(639, 381));

            // Type '1' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.RecordedAttemptNumber35Params.UIContentTextBoxEditText12;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordedAttemptNumber35Params.UIContentTextBoxEditSendKeys17, ModifierKeys.None);
        }
        
        /// <summary>
        /// EndOfRecording
        /// </summary>
        public void EndOfRecording()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIUntitledssSpreadsheeWindow.UINewssSpreadsheetTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIWaitasecWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(14, 10));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(80, 16));
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIUntitledssSpreadsheeWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIUntitledssSpreadsheeWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UIUntitledssSpreadsheeWindowExePath, this.RecordedMethod1Params.UIUntitledssSpreadsheeWindowAlternateExePath);

            // Type 'Test 2' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.RecordedMethod1Params.UIContentTextBoxEditText;

            // Type '{Enter}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordedMethod1Params.UIContentTextBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIUntitledssSpreadsheeWindow.UINewssSpreadsheetTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIWaitasecWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(17, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(75, 8));
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIUntitledssSpreadsheeWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinTreeItem uITestFilesTreeItem = this.UIOpenWindow.UITreeViewWindow.UITreeViewTree.UIDesktopTreeItem.UIComputerTreeItem.UILocalDiskCTreeItem.UIUsersTreeItem.UIAdminTreeItem.UIMyDocumentsTreeItem.UIVisualStudio2012TreeItem.UIProjectsTreeItem.UIPS6TreeItem.UITestFilesTreeItem;
            WinControl uIItemImage = this.UIOpenWindow.UIItemWindow.UIGoodListItem.UIItemImage;
            WinControl uIItemImage1 = this.UIOpenWindow.UIItemWindow1.UIItem31_GoodssListItem.UIItemImage;
            WinMenuItem uIOpenCtrlOMenuItem = this.UIUntitledssSpreadsheeWindow.UIMenuStripMenuBar.UIFileMenuItem.UIOpenCtrlOMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIG_n_conssListItem.UINameEdit;
            WinComboBox uIFilesoftypeComboBox = this.UIOpenWindow.UIItemWindow2.UIFilesoftypeComboBox;
            WinControl uIItemImage2 = this.UIOpenWindow.UIItemWindow1.UIGoodtxtListItem.UIItemImage;
            WinTreeItem uIBadTreeItem = this.UIOpenWindow.UITreeViewWindow.UITreeViewTree.UIDesktopTreeItem.UIComputerTreeItem.UILocalDiskCTreeItem.UIUsersTreeItem.UIAdminTreeItem.UIMyDocumentsTreeItem.UIVisualStudio2012TreeItem.UIProjectsTreeItem.UIPS6TreeItem.UITestFilesTreeItem.UIBadTreeItem;
            WinControl uIItemImage3 = this.UIOpenWindow.UIItemWindow.UIB_c_attssListItem.UIItemImage;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinMenuItem uIOpenInNewWindowMenuItem = this.UIUntitledssSpreadsheeWindow.UIMenuStripMenuBar.UIFileMenuItem.UIOpenInNewWindowMenuItem;
            WinEdit uINameEdit1 = this.UIOpenWindow.UIItemWindow.UIB_c_child_textssListItem.UINameEdit;
            WinEdit uINameEdit2 = this.UIOpenWindow.UIItemWindow.UIB_c_circularssListItem.UINameEdit;
            WinEdit uINameEdit3 = this.UIOpenWindow.UIItemWindow.UIB_c_dbleNodessListItem.UINameEdit;
            WinEdit uINameEdit4 = this.UIOpenWindow.UIItemWindow.UIB_c_namessListItem.UINameEdit;
            WinEdit uINameEdit5 = this.UIOpenWindow.UIItemWindow.UIB_c_noCossListItem.UINameEdit;
            WinEdit uINameEdit6 = this.UIOpenWindow.UIItemWindow.UIB_c_noNssListItem.UINameEdit;
            WinEdit uINameEdit7 = this.UIOpenWindow.UIItemWindow.UIB_co_att1ssListItem.UINameEdit;
            WinEdit uINameEdit8 = this.UIOpenWindow.UIItemWindow.UIB_co_nodeCountssListItem.UINameEdit;
            WinEdit uINameEdit9 = this.UIOpenWindow.UIItemWindow.UIB_forssListItem.UINameEdit;
            WinEdit uINameEdit10 = this.UIOpenWindow.UIItemWindow.UIB_n_att1ssListItem.UINameEdit;
            WinEdit uINameEdit11 = this.UIOpenWindow.UIItemWindow.UIB_n_nodeCountssListItem.UINameEdit;
            WinEdit uINameEdit12 = this.UIOpenWindow.UIItemWindow.UIB_n_nodeTypessListItem.UINameEdit;
            WinEdit uINameEdit13 = this.UIOpenWindow.UIItemWindow.UIB_spreadsheet_misnamListItem.UINameEdit;
            WinEdit uINameEdit14 = this.UIOpenWindow.UIItemWindow.UIB_ss_att_0attssListItem.UINameEdit;
            WinClient uIControlPanelClient = this.UIUntitledssSpreadsheeWindow.UIControlPanelWindow.UIControlPanelClient;
            WinEdit uINameEdit15 = this.UIOpenWindow.UIItemWindow.UIB_ss_att_2attsssListItem.UINameEdit;
            WinEdit uINameEdit16 = this.UIOpenWindow.UIItemWindow.UIB_ss_att_verssListItem.UINameEdit;
            WinEdit uINameEdit17 = this.UIOpenWindow.UIItemWindow.UIB_ss_verNumssListItem.UINameEdit;
            WinEdit uINameEdit18 = this.UIOpenWindow.UIItemWindow.UIBad_1ssListItem.UINameEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIUntitledssSpreadsheeWindow = ApplicationUnderTest.Launch(this.RecordedMethod3Params.UIUntitledssSpreadsheeWindowExePath, this.RecordedMethod3Params.UIUntitledssSpreadsheeWindowAlternateExePath);

            // Type 'Control + o' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordedMethod3Params.UIContentTextBoxEditSendKeys, ModifierKeys.Control);

            // Click 'Desktop' -> 'Computer' -> 'Local Disk (C:)' -> 'Users' -> 'Admin' -> 'My Documents' -> 'Visual Studio 2012' -> 'Projects' -> 'PS6' -> 'testFiles' tree item
            Mouse.Click(uITestFilesTreeItem, new Point(11, 10));

            // Double-Click image
            Mouse.DoubleClick(uIItemImage, new Point(8, 10));

            // Double-Click image
            Mouse.DoubleClick(uIItemImage1, new Point(12, 8));

            // Click 'File' -> 'Open (Ctrl+O)' menu item
            Mouse.Click(uIOpenCtrlOMenuItem, new Point(47, 13));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(24, 10));

            // Click 'File' -> 'Open (Ctrl+O)' menu item
            Mouse.Click(uIOpenCtrlOMenuItem, new Point(27, 11));

            // Select 'All Files (*.*)' in 'Files of type:' combo box
            uIFilesoftypeComboBox.SelectedItem = this.RecordedMethod3Params.UIFilesoftypeComboBoxSelectedItem;

            // Double-Click image
            Mouse.DoubleClick(uIItemImage2, new Point(13, 7));

            // Click 'File' -> 'Open (Ctrl+O)' menu item
            Mouse.Click(uIOpenCtrlOMenuItem, new Point(25, 14));

            // Click 'Desktop' -> 'Computer' -> 'Local Disk (C:)' -> 'Users' -> 'Admin' -> 'My Documents' -> 'Visual Studio 2012' -> 'Projects' -> 'PS6' -> 'testFiles' -> 'bad' tree item
            Mouse.Click(uIBadTreeItem, new Point(9, 3));

            // Click image
            Mouse.Click(uIItemImage3, new Point(8, 10));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(32, 9));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(19, 16));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(63, 15));

            // Click 'Name' text box
            Mouse.Click(uINameEdit1, new Point(27, 15));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(48, 15));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(34, 16));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(33, 19));

            // Click 'Name' text box
            Mouse.Click(uINameEdit2, new Point(14, 12));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(30, 14));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(43, 9));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(63, 13));

            // Click 'Name' text box
            Mouse.Click(uINameEdit3, new Point(23, 13));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(50, 16));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(55, 10));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(49, 10));

            // Click 'Name' text box
            Mouse.Click(uINameEdit4, new Point(27, 14));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(44, 5));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(27, 5));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(38, 6));

            // Click 'Name' text box
            Mouse.Click(uINameEdit5, new Point(14, 9));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(39, 17));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(24, 8));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(24, 6));

            // Click 'Name' text box
            Mouse.Click(uINameEdit6, new Point(21, 13));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(37, 13));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(31, 9));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(34, 8));

            // Click 'Name' text box
            Mouse.Click(uINameEdit7, new Point(27, 13));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(29, 9));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(37, 15));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(33, 4));

            // Click 'Name' text box
            Mouse.Click(uINameEdit8, new Point(39, 9));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(19, 15));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(47, 10));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(27, 6));

            // Click 'Name' text box
            Mouse.Click(uINameEdit9, new Point(1, 9));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(57, 11));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(42, 21));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(42, 11));

            // Click 'Name' text box
            Mouse.Click(uINameEdit10, new Point(40, 11));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(43, 15));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(42, 19));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(40, 16));

            // Click 'Name' text box
            Mouse.Click(uINameEdit11, new Point(34, 12));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(13, 11));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(46, 17));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(29, 9));

            // Click 'Name' text box
            Mouse.Click(uINameEdit11, new Point(70, 14));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(38, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(55, 9));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(29, 8));

            // Click 'Name' text box
            Mouse.Click(uINameEdit12, new Point(33, 12));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(34, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(57, 18));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(45, 16));

            // Click 'Name' text box
            Mouse.Click(uINameEdit13, new Point(37, 7));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(34, 8));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(63, 16));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(59, 12));

            // Click 'Name' text box
            Mouse.Click(uINameEdit14, new Point(47, 10));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(34, 14));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(34, 15));

            // Click 'controlPanel' client
            Mouse.Click(uIControlPanelClient, new Point(13, 2));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(66, 11));

            // Click 'Name' text box
            Mouse.Click(uINameEdit15, new Point(14, 12));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(35, 18));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(48, 13));

            // Click 'File' -> 'Open (Ctrl+O)' menu item
            Mouse.Click(uIOpenCtrlOMenuItem, new Point(36, 12));

            // Click 'Name' text box
            Mouse.Click(uINameEdit16, new Point(27, 12));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(34, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(47, 11));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(47, 12));

            // Click 'Name' text box
            Mouse.Click(uINameEdit17, new Point(25, 11));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(42, 14));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(38, 6));

            // Click 'File' -> 'Open In New Window' menu item
            Mouse.Click(uIOpenInNewWindowMenuItem, new Point(26, 3));

            // Click 'Name' text box
            Mouse.Click(uINameEdit18, new Point(7, 8));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(17, 15));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(36, 17));
        }
        
        /// <summary>
        /// RecordedMethod4
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIUntitledssSpreadsheeWindow.UINewssSpreadsheetTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 9));
        }
        
        /// <summary>
        /// RecordedMethod5 - Use 'RecordedMethod5Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinMenuItem uIOpenCtrlOMenuItem = this.UIUntitledssSpreadsheeWindow.UIMenuStripMenuBar.UIFileMenuItem.UIOpenCtrlOMenuItem;
            WinControl uIItemImage = this.UIOpenWindow.UIItemWindow.UIDemossListItem.UIItemImage;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIUntitledssSpreadsheeWindow = ApplicationUnderTest.Launch(this.RecordedMethod5Params.UIUntitledssSpreadsheeWindowExePath, this.RecordedMethod5Params.UIUntitledssSpreadsheeWindowAlternateExePath);

            // Click 'File' -> 'Open (Ctrl+O)' menu item
            Mouse.Click(uIOpenCtrlOMenuItem, new Point(35, 9));

            // Double-Click image
            Mouse.DoubleClick(uIItemImage, new Point(4, 10));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIDemossSpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'contentTextBox' text box equals '2'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod6
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIDemossSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(163, 42));
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIDemossSpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'contentTextBox' text box equals '=A1/A2'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinText uIItem1Text = this.UIDemossSpreadsheetWindow.UIItem1Window.UIItem1Text;
            #endregion

            // Verify that the 'DisplayText' property of '1' label equals '1'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIItem1TextDisplayText, uIItem1Text.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod7
        /// </summary>
        public void RecordedMethod7()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIDemossSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(205, 33));
        }
        
        /// <summary>
        /// AssertMethod4 - Use 'AssertMethod4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            WinText uIC1Text = this.UIDemossSpreadsheetWindow.UIC1Window.UIC1Text;
            #endregion

            // Verify that the 'DisplayText' property of 'C1' label equals 'C1'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UIC1TextDisplayText, uIC1Text.DisplayText);
        }
        
        /// <summary>
        /// AssertMethod5 - Use 'AssertMethod5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod5()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIDemossSpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'contentTextBox' text box equals '=B1+B2'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod6 - Use 'AssertMethod6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod6()
        {
            #region Variable Declarations
            WinText uIItem13Text = this.UIDemossSpreadsheetWindow.UIItem1Window.UIItem13Text;
            #endregion

            // Verify that the 'DisplayText' property of '13' label equals '13'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.UIItem13TextDisplayText, uIItem13Text.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod8
        /// </summary>
        public void RecordedMethod8()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIDemossSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(69, 60));
        }
        
        /// <summary>
        /// AssertMethod7 - Use 'AssertMethod7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod7()
        {
            #region Variable Declarations
            WinText uIA2Text = this.UIDemossSpreadsheetWindow.UIC1Window.UIA2Text;
            #endregion

            // Verify that the 'DisplayText' property of 'A2' label equals 'A2'
            Assert.AreEqual(this.AssertMethod7ExpectedValues.UIA2TextDisplayText, uIA2Text.DisplayText);
        }
        
        /// <summary>
        /// AssertMethod8 - Use 'AssertMethod8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod8()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIDemossSpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'contentTextBox' text box equals '2'
            Assert.AreEqual(this.AssertMethod8ExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod9 - Use 'AssertMethod9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod9()
        {
            #region Variable Declarations
            WinText uIItem2Text = this.UIDemossSpreadsheetWindow.UIItem1Window.UIItem2Text;
            #endregion

            // Verify that the 'DisplayText' property of '2' label equals '2'
            Assert.AreEqual(this.AssertMethod9ExpectedValues.UIItem2TextDisplayText, uIItem2Text.DisplayText);
        }
        
        /// <summary>
        /// AssertMethod10 - Use 'AssertMethod10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod10()
        {
            #region Variable Declarations
            WinText uIItem2Text = this.UIDemossSpreadsheetWindow.UIItem1Window.UIItem2Text;
            #endregion

            // Verify that the 'DisplayText' property of '2' label equals '2'
            Assert.AreEqual(this.AssertMethod10ExpectedValues.UIItem2TextDisplayText, uIItem2Text.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod9
        /// </summary>
        public void RecordedMethod9()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIDemossSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(119, 62));
        }
        
        /// <summary>
        /// AssertMethod11 - Use 'AssertMethod11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod11()
        {
            #region Variable Declarations
            WinText uIB2Text = this.UIDemossSpreadsheetWindow.UIC1Window.UIB2Text;
            #endregion

            // Verify that the 'DisplayText' property of 'B2' label equals 'B2'
            Assert.AreEqual(this.AssertMethod11ExpectedValues.UIB2TextDisplayText, uIB2Text.DisplayText);
        }
        
        /// <summary>
        /// AssertMethod12 - Use 'AssertMethod12ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod12()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIDemossSpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'contentTextBox' text box equals '=A3*A4'
            Assert.AreEqual(this.AssertMethod12ExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod13 - Use 'AssertMethod13ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod13()
        {
            #region Variable Declarations
            WinText uIItem12Text = this.UIDemossSpreadsheetWindow.UIItem1Window.UIItem12Text;
            #endregion

            // Verify that the 'DisplayText' property of '12' label equals '12'
            Assert.AreEqual(this.AssertMethod13ExpectedValues.UIItem12TextDisplayText, uIItem12Text.DisplayText);
        }
        
        /// <summary>
        /// AssertMethod14 - Use 'AssertMethod14ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod14()
        {
            #region Variable Declarations
            WinText uIItem12Text = this.UIDemossSpreadsheetWindow.UIItem1Window.UIItem12Text;
            #endregion

            // Verify that the 'DisplayText' property of '12' label equals '12'
            Assert.AreEqual(this.AssertMethod14ExpectedValues.UIItem12TextDisplayText, uIItem12Text.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod10 - Use 'RecordedMethod10Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod10()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIDemossSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentTextBoxEdit = this.UIDemossSpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(149, 81));

            // Type '=A1+A2' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.RecordedMethod10Params.UIContentTextBoxEditText;
        }
        
        /// <summary>
        /// AssertMethod15 - Use 'AssertMethod15ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod15()
        {
            #region Variable Declarations
            WinText uIB3Text = this.UIDemossSpreadsheetWindow.UIC1Window.UIB3Text;
            #endregion

            // Verify that the 'DisplayText' property of 'B3' label equals 'B3'
            Assert.AreEqual(this.AssertMethod15ExpectedValues.UIB3TextDisplayText, uIB3Text.DisplayText);
        }
        
        /// <summary>
        /// AssertMethod16 - Use 'AssertMethod16ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod16()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIDemossSpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'contentTextBox' text box equals '=A1+A2'
            Assert.AreEqual(this.AssertMethod16ExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod17 - Use 'AssertMethod17ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod17()
        {
            #region Variable Declarations
            WinText uIItem4Text = this.UIDemossSpreadsheetWindow.UIItem1Window.UIItem4Text;
            #endregion

            // Verify that the 'DisplayText' property of '4' label equals '4'
            Assert.AreEqual(this.AssertMethod17ExpectedValues.UIItem4TextDisplayText, uIItem4Text.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod11 - Use 'RecordedMethod11Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod11()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIDemossSpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Type '' in 'contentTextBox' text box
            uIContentTextBoxEdit.Text = this.RecordedMethod11Params.UIContentTextBoxEditText;

            // Click 'contentTextBox' text box
            Mouse.Click(uIContentTextBoxEdit, new Point(93, 12));

            // Type '{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}' in 'contentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.RecordedMethod11Params.UIContentTextBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod18 - Use 'AssertMethod18ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod18()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIDemossSpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'contentTextBox' text box equals ''
            Assert.AreEqual(this.AssertMethod18ExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod12
        /// </summary>
        public void RecordedMethod12()
        {
            #region Variable Declarations
            WinMenuItem uICloseAltF4MenuItem = this.UIDemossSpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UICloseAltF4MenuItem;
            WinButton uINOButton = this.UIWaitasecWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'File' -> 'Close (Alt+F4)' menu item
            Mouse.Click(uICloseAltF4MenuItem, new Point(48, 8));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(30, 20));
        }
        
        /// <summary>
        /// AssertMethod19 - Use 'AssertMethod19ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod19()
        {
            #region Variable Declarations
            WinText uIB3Text = this.UIDemossSpreadsheetWindow.UIC1Window.UIB3Text;
            #endregion

            // Verify that the 'DisplayText' property of 'B3' label equals 'B3'
            Assert.AreEqual(this.AssertMethod19ExpectedValues.UIB3TextDisplayText, uIB3Text.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod13
        /// </summary>
        public void RecordedMethod13()
        {
            #region Variable Declarations
            WinMenuItem uINewCtrlNMenuItem = this.UIDemossSpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UINewCtrlNMenuItem;
            WinButton uICloseButton = this.UIDemossSpreadsheetWindow.UIDemossSpreadsheetTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIWaitasecWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'File' -> 'New (Ctrl+N)' menu item
            Mouse.Click(uINewCtrlNMenuItem, new Point(25, 11));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(39, 9));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(45, 13));
        }
        
        /// <summary>
        /// AssertMethod20 - Use 'AssertMethod20ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod20()
        {
            #region Variable Declarations
            WinTitleBar uINewssSpreadsheetTitleBar = this.UIUntitledssSpreadsheeWindow.UINewssSpreadsheetTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'new.ss - Spreadsheet' title bar equals ' Untitled.ss  -  Spreadsheet'
            Assert.AreEqual(this.AssertMethod20ExpectedValues.UINewssSpreadsheetTitleBarDisplayText, uINewssSpreadsheetTitleBar.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod14
        /// </summary>
        public void RecordedMethod14()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIUntitledssSpreadsheeWindow.UINewssSpreadsheetTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 15));
        }
        
        #region Properties
        public virtual RecordedAttemptNumber35Params RecordedAttemptNumber35Params
        {
            get
            {
                if ((this.mRecordedAttemptNumber35Params == null))
                {
                    this.mRecordedAttemptNumber35Params = new RecordedAttemptNumber35Params();
                }
                return this.mRecordedAttemptNumber35Params;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual RecordedMethod5Params RecordedMethod5Params
        {
            get
            {
                if ((this.mRecordedMethod5Params == null))
                {
                    this.mRecordedMethod5Params = new RecordedMethod5Params();
                }
                return this.mRecordedMethod5Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public virtual AssertMethod5ExpectedValues AssertMethod5ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod5ExpectedValues == null))
                {
                    this.mAssertMethod5ExpectedValues = new AssertMethod5ExpectedValues();
                }
                return this.mAssertMethod5ExpectedValues;
            }
        }
        
        public virtual AssertMethod6ExpectedValues AssertMethod6ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod6ExpectedValues == null))
                {
                    this.mAssertMethod6ExpectedValues = new AssertMethod6ExpectedValues();
                }
                return this.mAssertMethod6ExpectedValues;
            }
        }
        
        public virtual AssertMethod7ExpectedValues AssertMethod7ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod7ExpectedValues == null))
                {
                    this.mAssertMethod7ExpectedValues = new AssertMethod7ExpectedValues();
                }
                return this.mAssertMethod7ExpectedValues;
            }
        }
        
        public virtual AssertMethod8ExpectedValues AssertMethod8ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod8ExpectedValues == null))
                {
                    this.mAssertMethod8ExpectedValues = new AssertMethod8ExpectedValues();
                }
                return this.mAssertMethod8ExpectedValues;
            }
        }
        
        public virtual AssertMethod9ExpectedValues AssertMethod9ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod9ExpectedValues == null))
                {
                    this.mAssertMethod9ExpectedValues = new AssertMethod9ExpectedValues();
                }
                return this.mAssertMethod9ExpectedValues;
            }
        }
        
        public virtual AssertMethod10ExpectedValues AssertMethod10ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod10ExpectedValues == null))
                {
                    this.mAssertMethod10ExpectedValues = new AssertMethod10ExpectedValues();
                }
                return this.mAssertMethod10ExpectedValues;
            }
        }
        
        public virtual AssertMethod11ExpectedValues AssertMethod11ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod11ExpectedValues == null))
                {
                    this.mAssertMethod11ExpectedValues = new AssertMethod11ExpectedValues();
                }
                return this.mAssertMethod11ExpectedValues;
            }
        }
        
        public virtual AssertMethod12ExpectedValues AssertMethod12ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod12ExpectedValues == null))
                {
                    this.mAssertMethod12ExpectedValues = new AssertMethod12ExpectedValues();
                }
                return this.mAssertMethod12ExpectedValues;
            }
        }
        
        public virtual AssertMethod13ExpectedValues AssertMethod13ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod13ExpectedValues == null))
                {
                    this.mAssertMethod13ExpectedValues = new AssertMethod13ExpectedValues();
                }
                return this.mAssertMethod13ExpectedValues;
            }
        }
        
        public virtual AssertMethod14ExpectedValues AssertMethod14ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod14ExpectedValues == null))
                {
                    this.mAssertMethod14ExpectedValues = new AssertMethod14ExpectedValues();
                }
                return this.mAssertMethod14ExpectedValues;
            }
        }
        
        public virtual RecordedMethod10Params RecordedMethod10Params
        {
            get
            {
                if ((this.mRecordedMethod10Params == null))
                {
                    this.mRecordedMethod10Params = new RecordedMethod10Params();
                }
                return this.mRecordedMethod10Params;
            }
        }
        
        public virtual AssertMethod15ExpectedValues AssertMethod15ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod15ExpectedValues == null))
                {
                    this.mAssertMethod15ExpectedValues = new AssertMethod15ExpectedValues();
                }
                return this.mAssertMethod15ExpectedValues;
            }
        }
        
        public virtual AssertMethod16ExpectedValues AssertMethod16ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod16ExpectedValues == null))
                {
                    this.mAssertMethod16ExpectedValues = new AssertMethod16ExpectedValues();
                }
                return this.mAssertMethod16ExpectedValues;
            }
        }
        
        public virtual AssertMethod17ExpectedValues AssertMethod17ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod17ExpectedValues == null))
                {
                    this.mAssertMethod17ExpectedValues = new AssertMethod17ExpectedValues();
                }
                return this.mAssertMethod17ExpectedValues;
            }
        }
        
        public virtual RecordedMethod11Params RecordedMethod11Params
        {
            get
            {
                if ((this.mRecordedMethod11Params == null))
                {
                    this.mRecordedMethod11Params = new RecordedMethod11Params();
                }
                return this.mRecordedMethod11Params;
            }
        }
        
        public virtual AssertMethod18ExpectedValues AssertMethod18ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod18ExpectedValues == null))
                {
                    this.mAssertMethod18ExpectedValues = new AssertMethod18ExpectedValues();
                }
                return this.mAssertMethod18ExpectedValues;
            }
        }
        
        public virtual AssertMethod19ExpectedValues AssertMethod19ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod19ExpectedValues == null))
                {
                    this.mAssertMethod19ExpectedValues = new AssertMethod19ExpectedValues();
                }
                return this.mAssertMethod19ExpectedValues;
            }
        }
        
        public virtual AssertMethod20ExpectedValues AssertMethod20ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod20ExpectedValues == null))
                {
                    this.mAssertMethod20ExpectedValues = new AssertMethod20ExpectedValues();
                }
                return this.mAssertMethod20ExpectedValues;
            }
        }
        
        public UIUntitledssSpreadsheeWindow UIUntitledssSpreadsheeWindow
        {
            get
            {
                if ((this.mUIUntitledssSpreadsheeWindow == null))
                {
                    this.mUIUntitledssSpreadsheeWindow = new UIUntitledssSpreadsheeWindow();
                }
                return this.mUIUntitledssSpreadsheeWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIInstructionsWindow UIInstructionsWindow
        {
            get
            {
                if ((this.mUIInstructionsWindow == null))
                {
                    this.mUIInstructionsWindow = new UIInstructionsWindow();
                }
                return this.mUIInstructionsWindow;
            }
        }
        
        public UIUntitledssSpreadsheeWindow1 UIUntitledssSpreadsheeWindow1
        {
            get
            {
                if ((this.mUIUntitledssSpreadsheeWindow1 == null))
                {
                    this.mUIUntitledssSpreadsheeWindow1 = new UIUntitledssSpreadsheeWindow1();
                }
                return this.mUIUntitledssSpreadsheeWindow1;
            }
        }
        
        public UIWaitasecWindow UIWaitasecWindow
        {
            get
            {
                if ((this.mUIWaitasecWindow == null))
                {
                    this.mUIWaitasecWindow = new UIWaitasecWindow();
                }
                return this.mUIWaitasecWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UINewssSpreadsheetWindow UINewssSpreadsheetWindow
        {
            get
            {
                if ((this.mUINewssSpreadsheetWindow == null))
                {
                    this.mUINewssSpreadsheetWindow = new UINewssSpreadsheetWindow();
                }
                return this.mUINewssSpreadsheetWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIDeleteFileWindow UIDeleteFileWindow
        {
            get
            {
                if ((this.mUIDeleteFileWindow == null))
                {
                    this.mUIDeleteFileWindow = new UIDeleteFileWindow();
                }
                return this.mUIDeleteFileWindow;
            }
        }
        
        public UIDemossSpreadsheetWindow UIDemossSpreadsheetWindow
        {
            get
            {
                if ((this.mUIDemossSpreadsheetWindow == null))
                {
                    this.mUIDemossSpreadsheetWindow = new UIDemossSpreadsheetWindow();
                }
                return this.mUIDemossSpreadsheetWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedAttemptNumber35Params mRecordedAttemptNumber35Params;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private RecordedMethod5Params mRecordedMethod5Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private AssertMethod5ExpectedValues mAssertMethod5ExpectedValues;
        
        private AssertMethod6ExpectedValues mAssertMethod6ExpectedValues;
        
        private AssertMethod7ExpectedValues mAssertMethod7ExpectedValues;
        
        private AssertMethod8ExpectedValues mAssertMethod8ExpectedValues;
        
        private AssertMethod9ExpectedValues mAssertMethod9ExpectedValues;
        
        private AssertMethod10ExpectedValues mAssertMethod10ExpectedValues;
        
        private AssertMethod11ExpectedValues mAssertMethod11ExpectedValues;
        
        private AssertMethod12ExpectedValues mAssertMethod12ExpectedValues;
        
        private AssertMethod13ExpectedValues mAssertMethod13ExpectedValues;
        
        private AssertMethod14ExpectedValues mAssertMethod14ExpectedValues;
        
        private RecordedMethod10Params mRecordedMethod10Params;
        
        private AssertMethod15ExpectedValues mAssertMethod15ExpectedValues;
        
        private AssertMethod16ExpectedValues mAssertMethod16ExpectedValues;
        
        private AssertMethod17ExpectedValues mAssertMethod17ExpectedValues;
        
        private RecordedMethod11Params mRecordedMethod11Params;
        
        private AssertMethod18ExpectedValues mAssertMethod18ExpectedValues;
        
        private AssertMethod19ExpectedValues mAssertMethod19ExpectedValues;
        
        private AssertMethod20ExpectedValues mAssertMethod20ExpectedValues;
        
        private UIUntitledssSpreadsheeWindow mUIUntitledssSpreadsheeWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UIInstructionsWindow mUIInstructionsWindow;
        
        private UIUntitledssSpreadsheeWindow1 mUIUntitledssSpreadsheeWindow1;
        
        private UIWaitasecWindow mUIWaitasecWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UINewssSpreadsheetWindow mUINewssSpreadsheetWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIItemWindow4 mUIItemWindow;
        
        private UIDeleteFileWindow mUIDeleteFileWindow;
        
        private UIDemossSpreadsheetWindow mUIDemossSpreadsheetWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedAttemptNumber35'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedAttemptNumber35Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIUntitledssSpreadsheeWindowExePath = "C:\\Users\\Admin\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIUntitledssSpreadsheeWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '1' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '2' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText2 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText3 = "=A1";
        
        /// <summary>
        /// Type '=A2+1' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText4 = "=A2+1";
        
        /// <summary>
        /// Type '=(' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText5 = "=(";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=c2' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText6 = "=c2";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '1' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText7 = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'Control + n' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys5 = "n";
        
        /// <summary>
        /// Type 'Alt + {F4}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys6 = "{F4}";
        
        /// <summary>
        /// Type 'Control + n' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys7 = "n";
        
        /// <summary>
        /// Type '1' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText8 = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys8 = "{Enter}";
        
        /// <summary>
        /// Type 'Alt + {F4}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys9 = "{F4}";
        
        /// <summary>
        /// Type '{Right}' in '&Yes' button
        /// </summary>
        public string UIYesButtonSendKeys = "{Right}";
        
        /// <summary>
        /// Type '{Enter}' in '&No' button
        /// </summary>
        public string UINOButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Alt + {F4}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys10 = "{F4}";
        
        /// <summary>
        /// Type '{Enter}' in '&Yes' button
        /// </summary>
        public string UIYesButtonSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'Control + s' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys11 = "s";
        
        /// <summary>
        /// Select 'new' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "new";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Control + o' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys12 = "o";
        
        /// <summary>
        /// Type '2' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText9 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys13 = "{Enter}";
        
        /// <summary>
        /// Type 'Control + s' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys14 = "s";
        
        /// <summary>
        /// Type '3' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText10 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys15 = "{Enter}";
        
        /// <summary>
        /// Type '4' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText11 = "4";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys16 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in '&Yes' button
        /// </summary>
        public string UIYesButtonSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '1' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText12 = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys17 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIUntitledssSpreadsheeWindowExePath = "C:\\Users\\Admin\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIUntitledssSpreadsheeWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'Test 2' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "Test 2";
        
        /// <summary>
        /// Type '{Enter}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIUntitledssSpreadsheeWindowExePath = "C:\\Users\\Admin\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIUntitledssSpreadsheeWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'Control + o' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "o";
        
        /// <summary>
        /// Select 'All Files (*.*)' in 'Files of type:' combo box
        /// </summary>
        public string UIFilesoftypeComboBoxSelectedItem = "All Files (*.*)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod5Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIUntitledssSpreadsheeWindowExePath = "C:\\Users\\Admin\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIUntitledssSpreadsheeWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'contentTextBox' text box equals '2'
        /// </summary>
        public string UIContentTextBoxEditText = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'contentTextBox' text box equals '=A1/A2'
        /// </summary>
        public string UIContentTextBoxEditText = "=A1/A2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '1' label equals '1'
        /// </summary>
        public string UIItem1TextDisplayText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'C1' label equals 'C1'
        /// </summary>
        public string UIC1TextDisplayText = "C1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'contentTextBox' text box equals '=B1+B2'
        /// </summary>
        public string UIContentTextBoxEditText = "=B1+B2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '13' label equals '13'
        /// </summary>
        public string UIItem13TextDisplayText = "13";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'A2' label equals 'A2'
        /// </summary>
        public string UIA2TextDisplayText = "A2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'contentTextBox' text box equals '2'
        /// </summary>
        public string UIContentTextBoxEditText = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '2' label equals '2'
        /// </summary>
        public string UIItem2TextDisplayText = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '2' label equals '2'
        /// </summary>
        public string UIItem2TextDisplayText = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'B2' label equals 'B2'
        /// </summary>
        public string UIB2TextDisplayText = "B2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod12ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'contentTextBox' text box equals '=A3*A4'
        /// </summary>
        public string UIContentTextBoxEditText = "=A3*A4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod13ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '12' label equals '12'
        /// </summary>
        public string UIItem12TextDisplayText = "12";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod14ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '12' label equals '12'
        /// </summary>
        public string UIItem12TextDisplayText = "12";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod10Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=A1+A2' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "=A1+A2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod15ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'B3' label equals 'B3'
        /// </summary>
        public string UIB3TextDisplayText = "B3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod16'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod16ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'contentTextBox' text box equals '=A1+A2'
        /// </summary>
        public string UIContentTextBoxEditText = "=A1+A2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod17'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod17ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '4' label equals '4'
        /// </summary>
        public string UIItem4TextDisplayText = "4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod11Params
    {
        
        #region Fields
        /// <summary>
        /// Type '' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "";
        
        /// <summary>
        /// Type '{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}' in 'contentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Ba" +
            "ck}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod18'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod18ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'contentTextBox' text box equals ''
        /// </summary>
        public string UIContentTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod19ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'B3' label equals 'B3'
        /// </summary>
        public string UIB3TextDisplayText = "B3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod20'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod20ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'new.ss - Spreadsheet' title bar equals ' Untitled.ss  -  Spreadsheet'
        /// </summary>
        public string UINewssSpreadsheetTitleBarDisplayText = " Untitled.ss  -  Spreadsheet";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIUntitledssSpreadsheeWindow : WinWindow
    {
        
        public UIUntitledssSpreadsheeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = " Untitled.ss  -  Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add(" Untitled.ss  -  Spreadsheet");
            this.WindowTitles.Add(" new.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIContentTextBoxWindow UIContentTextBoxWindow
        {
            get
            {
                if ((this.mUIContentTextBoxWindow == null))
                {
                    this.mUIContentTextBoxWindow = new UIContentTextBoxWindow(this);
                }
                return this.mUIContentTextBoxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIMenuStripMenuBar UIMenuStripMenuBar
        {
            get
            {
                if ((this.mUIMenuStripMenuBar == null))
                {
                    this.mUIMenuStripMenuBar = new UIMenuStripMenuBar(this);
                }
                return this.mUIMenuStripMenuBar;
            }
        }
        
        public UINewssSpreadsheetTitleBar UINewssSpreadsheetTitleBar
        {
            get
            {
                if ((this.mUINewssSpreadsheetTitleBar == null))
                {
                    this.mUINewssSpreadsheetTitleBar = new UINewssSpreadsheetTitleBar(this);
                }
                return this.mUINewssSpreadsheetTitleBar;
            }
        }
        
        public UIControlPanelWindow UIControlPanelWindow
        {
            get
            {
                if ((this.mUIControlPanelWindow == null))
                {
                    this.mUIControlPanelWindow = new UIControlPanelWindow(this);
                }
                return this.mUIControlPanelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIContentTextBoxWindow mUIContentTextBoxWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIMenuStripMenuBar mUIMenuStripMenuBar;
        
        private UINewssSpreadsheetTitleBar mUINewssSpreadsheetTitleBar;
        
        private UIControlPanelWindow mUIControlPanelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIContentTextBoxWindow : WinWindow
    {
        
        public UIContentTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentTextBox";
            this.WindowTitles.Add(" Untitled.ss  -  Spreadsheet");
            this.WindowTitles.Add(" new.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentTextBoxEdit
        {
            get
            {
                if ((this.mUIContentTextBoxEdit == null))
                {
                    this.mUIContentTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = ":";
                    this.mUIContentTextBoxEdit.WindowTitles.Add(" Untitled.ss  -  Spreadsheet");
                    this.mUIContentTextBoxEdit.WindowTitles.Add(" new.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIContentTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add(" Untitled.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add(" Untitled.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMenuStripMenuBar : WinMenuBar
    {
        
        public UIMenuStripMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip2";
            this.WindowTitles.Add(" Untitled.ss  -  Spreadsheet");
            this.WindowTitles.Add(" new.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
                    this.mUIHelpMenuItem.WindowTitles.Add(" Untitled.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIHelpMenuItem;
            }
        }
        
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIHelpMenuItem;
        
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add(" new.ss  -  Spreadsheet");
            this.WindowTitles.Add(" Untitled.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenInNewWindowMenuItem
        {
            get
            {
                if ((this.mUIOpenInNewWindowMenuItem == null))
                {
                    this.mUIOpenInNewWindowMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenInNewWindowMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open In New Window";
                    this.mUIOpenInNewWindowMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenInNewWindowMenuItem.WindowTitles.Add(" new.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIOpenInNewWindowMenuItem;
            }
        }
        
        public WinMenuItem UIOpenCtrlOMenuItem
        {
            get
            {
                if ((this.mUIOpenCtrlOMenuItem == null))
                {
                    this.mUIOpenCtrlOMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenCtrlOMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open          (Ctrl+O)";
                    this.mUIOpenCtrlOMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenCtrlOMenuItem.WindowTitles.Add(" new.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIOpenCtrlOMenuItem;
            }
        }
        
        public WinMenuItem UINewCtrlNMenuItem
        {
            get
            {
                if ((this.mUINewCtrlNMenuItem == null))
                {
                    this.mUINewCtrlNMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewCtrlNMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New            (Ctrl+N)";
                    this.mUINewCtrlNMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewCtrlNMenuItem.WindowTitles.Add(" new.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUINewCtrlNMenuItem;
            }
        }
        
        public WinMenuItem UISaveCtrlSMenuItem
        {
            get
            {
                if ((this.mUISaveCtrlSMenuItem == null))
                {
                    this.mUISaveCtrlSMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveCtrlSMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save            (Ctrl+S)";
                    this.mUISaveCtrlSMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveCtrlSMenuItem.WindowTitles.Add(" Untitled.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUISaveCtrlSMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenInNewWindowMenuItem;
        
        private WinMenuItem mUIOpenCtrlOMenuItem;
        
        private WinMenuItem mUINewCtrlNMenuItem;
        
        private WinMenuItem mUISaveCtrlSMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINewssSpreadsheetTitleBar : WinTitleBar
    {
        
        public UINewssSpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add(" new.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add(" new.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIControlPanelWindow : WinWindow
    {
        
        public UIControlPanelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "controlPanel";
            this.WindowTitles.Add(" Untitled.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UIControlPanelClient
        {
            get
            {
                if ((this.mUIControlPanelClient == null))
                {
                    this.mUIControlPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIControlPanelClient.WindowTitles.Add(" Untitled.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIControlPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIControlPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIInstructionsWindow : WinWindow
    {
        
        public UIInstructionsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Instructions";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Instructions");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Instructions");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Instructions");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIUntitledssSpreadsheeWindow1 : WinWindow
    {
        
        public UIUntitledssSpreadsheeWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = " Untitled.ss  -  Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add(" Untitled.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIContentTextBoxWindow1 UIContentTextBoxWindow
        {
            get
            {
                if ((this.mUIContentTextBoxWindow == null))
                {
                    this.mUIContentTextBoxWindow = new UIContentTextBoxWindow1(this);
                }
                return this.mUIContentTextBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIContentTextBoxWindow1 mUIContentTextBoxWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIContentTextBoxWindow1 : WinWindow
    {
        
        public UIContentTextBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentTextBox";
            this.WindowTitles.Add(" Untitled.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentTextBoxEdit
        {
            get
            {
                if ((this.mUIContentTextBoxEdit == null))
                {
                    this.mUIContentTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = ":";
                    this.mUIContentTextBoxEdit.WindowTitles.Add(" Untitled.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIContentTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIWaitasecWindow : WinWindow
    {
        
        public UIWaitasecWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Wait a sec!";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Wait a sec!");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Wait a sec!");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Wait a sec!");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Wait a sec!");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Wait a sec!");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UISaveWindow mUISaveWindow;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UICancelWindow mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UINewssListItem UINewssListItem
        {
            get
            {
                if ((this.mUINewssListItem == null))
                {
                    this.mUINewssListItem = new UINewssListItem(this);
                }
                return this.mUINewssListItem;
            }
        }
        #endregion
        
        #region Fields
        private UINewssListItem mUINewssListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINewssListItem : WinListItem
    {
        
        public UINewssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "new.ss";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinControl UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchProperties[UITestControl.PropertyNames.ControlType] = "Image";
                    this.mUIItemImage.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UINewssListItem1 UINewssListItem
        {
            get
            {
                if ((this.mUINewssListItem == null))
                {
                    this.mUINewssListItem = new UINewssListItem1(this);
                }
                return this.mUINewssListItem;
            }
        }
        #endregion
        
        #region Fields
        private UINewssListItem1 mUINewssListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINewssListItem1 : WinListItem
    {
        
        public UINewssListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "new.ss";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinControl UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchProperties[UITestControl.PropertyNames.ControlType] = "Image";
                    this.mUIItemImage.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UICancelWindow1 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow1(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIOpenWindow2 UIOpenWindow2
        {
            get
            {
                if ((this.mUIOpenWindow2 == null))
                {
                    this.mUIOpenWindow2 = new UIOpenWindow2(this);
                }
                return this.mUIOpenWindow2;
            }
        }
        
        public UIOpenWindow3 UIOpenWindow3
        {
            get
            {
                if ((this.mUIOpenWindow3 == null))
                {
                    this.mUIOpenWindow3 = new UIOpenWindow3(this);
                }
                return this.mUIOpenWindow3;
            }
        }
        
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UICancelWindow1 mUICancelWindow;
        
        private UIOpenWindow2 mUIOpenWindow2;
        
        private UIOpenWindow3 mUIOpenWindow3;
        
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemWindow12 mUIItemWindow1;
        
        private UIItemWindow21 mUIItemWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UINewssListItem2 UINewssListItem
        {
            get
            {
                if ((this.mUINewssListItem == null))
                {
                    this.mUINewssListItem = new UINewssListItem2(this);
                }
                return this.mUINewssListItem;
            }
        }
        
        public UIGoodListItem UIGoodListItem
        {
            get
            {
                if ((this.mUIGoodListItem == null))
                {
                    this.mUIGoodListItem = new UIGoodListItem(this);
                }
                return this.mUIGoodListItem;
            }
        }
        
        public UIG_n_conssListItem UIG_n_conssListItem
        {
            get
            {
                if ((this.mUIG_n_conssListItem == null))
                {
                    this.mUIG_n_conssListItem = new UIG_n_conssListItem(this);
                }
                return this.mUIG_n_conssListItem;
            }
        }
        
        public UIB_c_attssListItem UIB_c_attssListItem
        {
            get
            {
                if ((this.mUIB_c_attssListItem == null))
                {
                    this.mUIB_c_attssListItem = new UIB_c_attssListItem(this);
                }
                return this.mUIB_c_attssListItem;
            }
        }
        
        public UIB_c_child_textssListItem UIB_c_child_textssListItem
        {
            get
            {
                if ((this.mUIB_c_child_textssListItem == null))
                {
                    this.mUIB_c_child_textssListItem = new UIB_c_child_textssListItem(this);
                }
                return this.mUIB_c_child_textssListItem;
            }
        }
        
        public UIB_c_circularssListItem UIB_c_circularssListItem
        {
            get
            {
                if ((this.mUIB_c_circularssListItem == null))
                {
                    this.mUIB_c_circularssListItem = new UIB_c_circularssListItem(this);
                }
                return this.mUIB_c_circularssListItem;
            }
        }
        
        public UIB_c_dbleNodessListItem UIB_c_dbleNodessListItem
        {
            get
            {
                if ((this.mUIB_c_dbleNodessListItem == null))
                {
                    this.mUIB_c_dbleNodessListItem = new UIB_c_dbleNodessListItem(this);
                }
                return this.mUIB_c_dbleNodessListItem;
            }
        }
        
        public UIB_c_namessListItem UIB_c_namessListItem
        {
            get
            {
                if ((this.mUIB_c_namessListItem == null))
                {
                    this.mUIB_c_namessListItem = new UIB_c_namessListItem(this);
                }
                return this.mUIB_c_namessListItem;
            }
        }
        
        public UIB_c_noCossListItem UIB_c_noCossListItem
        {
            get
            {
                if ((this.mUIB_c_noCossListItem == null))
                {
                    this.mUIB_c_noCossListItem = new UIB_c_noCossListItem(this);
                }
                return this.mUIB_c_noCossListItem;
            }
        }
        
        public UIB_c_noNssListItem UIB_c_noNssListItem
        {
            get
            {
                if ((this.mUIB_c_noNssListItem == null))
                {
                    this.mUIB_c_noNssListItem = new UIB_c_noNssListItem(this);
                }
                return this.mUIB_c_noNssListItem;
            }
        }
        
        public UIB_co_att1ssListItem UIB_co_att1ssListItem
        {
            get
            {
                if ((this.mUIB_co_att1ssListItem == null))
                {
                    this.mUIB_co_att1ssListItem = new UIB_co_att1ssListItem(this);
                }
                return this.mUIB_co_att1ssListItem;
            }
        }
        
        public UIB_co_nodeCountssListItem UIB_co_nodeCountssListItem
        {
            get
            {
                if ((this.mUIB_co_nodeCountssListItem == null))
                {
                    this.mUIB_co_nodeCountssListItem = new UIB_co_nodeCountssListItem(this);
                }
                return this.mUIB_co_nodeCountssListItem;
            }
        }
        
        public UIB_forssListItem UIB_forssListItem
        {
            get
            {
                if ((this.mUIB_forssListItem == null))
                {
                    this.mUIB_forssListItem = new UIB_forssListItem(this);
                }
                return this.mUIB_forssListItem;
            }
        }
        
        public UIB_n_att1ssListItem UIB_n_att1ssListItem
        {
            get
            {
                if ((this.mUIB_n_att1ssListItem == null))
                {
                    this.mUIB_n_att1ssListItem = new UIB_n_att1ssListItem(this);
                }
                return this.mUIB_n_att1ssListItem;
            }
        }
        
        public UIB_n_nodeCountssListItem UIB_n_nodeCountssListItem
        {
            get
            {
                if ((this.mUIB_n_nodeCountssListItem == null))
                {
                    this.mUIB_n_nodeCountssListItem = new UIB_n_nodeCountssListItem(this);
                }
                return this.mUIB_n_nodeCountssListItem;
            }
        }
        
        public UIB_n_nodeTypessListItem UIB_n_nodeTypessListItem
        {
            get
            {
                if ((this.mUIB_n_nodeTypessListItem == null))
                {
                    this.mUIB_n_nodeTypessListItem = new UIB_n_nodeTypessListItem(this);
                }
                return this.mUIB_n_nodeTypessListItem;
            }
        }
        
        public UIB_spreadsheet_misnamListItem UIB_spreadsheet_misnamListItem
        {
            get
            {
                if ((this.mUIB_spreadsheet_misnamListItem == null))
                {
                    this.mUIB_spreadsheet_misnamListItem = new UIB_spreadsheet_misnamListItem(this);
                }
                return this.mUIB_spreadsheet_misnamListItem;
            }
        }
        
        public UIB_ss_att_0attssListItem UIB_ss_att_0attssListItem
        {
            get
            {
                if ((this.mUIB_ss_att_0attssListItem == null))
                {
                    this.mUIB_ss_att_0attssListItem = new UIB_ss_att_0attssListItem(this);
                }
                return this.mUIB_ss_att_0attssListItem;
            }
        }
        
        public UIB_ss_att_2attsssListItem UIB_ss_att_2attsssListItem
        {
            get
            {
                if ((this.mUIB_ss_att_2attsssListItem == null))
                {
                    this.mUIB_ss_att_2attsssListItem = new UIB_ss_att_2attsssListItem(this);
                }
                return this.mUIB_ss_att_2attsssListItem;
            }
        }
        
        public UIB_ss_att_verssListItem UIB_ss_att_verssListItem
        {
            get
            {
                if ((this.mUIB_ss_att_verssListItem == null))
                {
                    this.mUIB_ss_att_verssListItem = new UIB_ss_att_verssListItem(this);
                }
                return this.mUIB_ss_att_verssListItem;
            }
        }
        
        public UIB_ss_verNumssListItem UIB_ss_verNumssListItem
        {
            get
            {
                if ((this.mUIB_ss_verNumssListItem == null))
                {
                    this.mUIB_ss_verNumssListItem = new UIB_ss_verNumssListItem(this);
                }
                return this.mUIB_ss_verNumssListItem;
            }
        }
        
        public UIBad_1ssListItem UIBad_1ssListItem
        {
            get
            {
                if ((this.mUIBad_1ssListItem == null))
                {
                    this.mUIBad_1ssListItem = new UIBad_1ssListItem(this);
                }
                return this.mUIBad_1ssListItem;
            }
        }
        
        public UIDemossListItem UIDemossListItem
        {
            get
            {
                if ((this.mUIDemossListItem == null))
                {
                    this.mUIDemossListItem = new UIDemossListItem(this);
                }
                return this.mUIDemossListItem;
            }
        }
        #endregion
        
        #region Fields
        private UINewssListItem2 mUINewssListItem;
        
        private UIGoodListItem mUIGoodListItem;
        
        private UIG_n_conssListItem mUIG_n_conssListItem;
        
        private UIB_c_attssListItem mUIB_c_attssListItem;
        
        private UIB_c_child_textssListItem mUIB_c_child_textssListItem;
        
        private UIB_c_circularssListItem mUIB_c_circularssListItem;
        
        private UIB_c_dbleNodessListItem mUIB_c_dbleNodessListItem;
        
        private UIB_c_namessListItem mUIB_c_namessListItem;
        
        private UIB_c_noCossListItem mUIB_c_noCossListItem;
        
        private UIB_c_noNssListItem mUIB_c_noNssListItem;
        
        private UIB_co_att1ssListItem mUIB_co_att1ssListItem;
        
        private UIB_co_nodeCountssListItem mUIB_co_nodeCountssListItem;
        
        private UIB_forssListItem mUIB_forssListItem;
        
        private UIB_n_att1ssListItem mUIB_n_att1ssListItem;
        
        private UIB_n_nodeCountssListItem mUIB_n_nodeCountssListItem;
        
        private UIB_n_nodeTypessListItem mUIB_n_nodeTypessListItem;
        
        private UIB_spreadsheet_misnamListItem mUIB_spreadsheet_misnamListItem;
        
        private UIB_ss_att_0attssListItem mUIB_ss_att_0attssListItem;
        
        private UIB_ss_att_2attsssListItem mUIB_ss_att_2attsssListItem;
        
        private UIB_ss_att_verssListItem mUIB_ss_att_verssListItem;
        
        private UIB_ss_verNumssListItem mUIB_ss_verNumssListItem;
        
        private UIBad_1ssListItem mUIBad_1ssListItem;
        
        private UIDemossListItem mUIDemossListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINewssListItem2 : WinListItem
    {
        
        public UINewssListItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "new.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIGoodListItem : WinListItem
    {
        
        public UIGoodListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "good";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinControl UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchProperties[UITestControl.PropertyNames.ControlType] = "Image";
                    this.mUIItemImage.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIG_n_conssListItem : WinListItem
    {
        
        public UIG_n_conssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "g_n_con.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_c_attssListItem : WinListItem
    {
        
        public UIB_c_attssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_c_att.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinControl UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchProperties[UITestControl.PropertyNames.ControlType] = "Image";
                    this.mUIItemImage.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_c_child_textssListItem : WinListItem
    {
        
        public UIB_c_child_textssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_c_child_text.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_c_circularssListItem : WinListItem
    {
        
        public UIB_c_circularssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_c_circular.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_c_dbleNodessListItem : WinListItem
    {
        
        public UIB_c_dbleNodessListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_c_dbleNode.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_c_namessListItem : WinListItem
    {
        
        public UIB_c_namessListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_c_name.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_c_noCossListItem : WinListItem
    {
        
        public UIB_c_noCossListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_c_noCo.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_c_noNssListItem : WinListItem
    {
        
        public UIB_c_noNssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_c_noN.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_co_att1ssListItem : WinListItem
    {
        
        public UIB_co_att1ssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_co_att1.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_co_nodeCountssListItem : WinListItem
    {
        
        public UIB_co_nodeCountssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_co_nodeCount.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_forssListItem : WinListItem
    {
        
        public UIB_forssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_for.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_n_att1ssListItem : WinListItem
    {
        
        public UIB_n_att1ssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_n_att1.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_n_nodeCountssListItem : WinListItem
    {
        
        public UIB_n_nodeCountssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_n_nodeCount.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_n_nodeTypessListItem : WinListItem
    {
        
        public UIB_n_nodeTypessListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_n_nodeType.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_spreadsheet_misnamListItem : WinListItem
    {
        
        public UIB_spreadsheet_misnamListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_spreadsheet_misnamed.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_ss_att_0attssListItem : WinListItem
    {
        
        public UIB_ss_att_0attssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_ss_att_0att.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_ss_att_2attsssListItem : WinListItem
    {
        
        public UIB_ss_att_2attsssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_ss_att_2atts.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_ss_att_verssListItem : WinListItem
    {
        
        public UIB_ss_att_verssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_ss_att_ver.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIB_ss_verNumssListItem : WinListItem
    {
        
        public UIB_ss_verNumssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "b_ss_verNum.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIBad_1ssListItem : WinListItem
    {
        
        public UIBad_1ssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "bad_1.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDemossListItem : WinListItem
    {
        
        public UIDemossListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "demo.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinControl UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchProperties[UITestControl.PropertyNames.ControlType] = "Image";
                    this.mUIItemImage.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICancelWindow1 : WinWindow
    {
        
        public UICancelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenWindow2 : WinWindow
    {
        
        public UIOpenWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenWindow3 : WinWindow
    {
        
        public UIOpenWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIDesktopTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new UIDesktopTreeItem(this);
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDesktopTreeItem : WinTreeItem
    {
        
        public UIDesktopTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIComputerTreeItem UIComputerTreeItem
        {
            get
            {
                if ((this.mUIComputerTreeItem == null))
                {
                    this.mUIComputerTreeItem = new UIComputerTreeItem(this);
                }
                return this.mUIComputerTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIComputerTreeItem mUIComputerTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIComputerTreeItem : WinTreeItem
    {
        
        public UIComputerTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Computer";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UILocalDiskCTreeItem UILocalDiskCTreeItem
        {
            get
            {
                if ((this.mUILocalDiskCTreeItem == null))
                {
                    this.mUILocalDiskCTreeItem = new UILocalDiskCTreeItem(this);
                }
                return this.mUILocalDiskCTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UILocalDiskCTreeItem mUILocalDiskCTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UILocalDiskCTreeItem : WinTreeItem
    {
        
        public UILocalDiskCTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Local Disk (C:)";
            this.SearchProperties["Value"] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIUsersTreeItem UIUsersTreeItem
        {
            get
            {
                if ((this.mUIUsersTreeItem == null))
                {
                    this.mUIUsersTreeItem = new UIUsersTreeItem(this);
                }
                return this.mUIUsersTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUsersTreeItem mUIUsersTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIUsersTreeItem : WinTreeItem
    {
        
        public UIUsersTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Users";
            this.SearchProperties["Value"] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIAdminTreeItem UIAdminTreeItem
        {
            get
            {
                if ((this.mUIAdminTreeItem == null))
                {
                    this.mUIAdminTreeItem = new UIAdminTreeItem(this);
                }
                return this.mUIAdminTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIAdminTreeItem mUIAdminTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIAdminTreeItem : WinTreeItem
    {
        
        public UIAdminTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Admin";
            this.SearchProperties["Value"] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIMyDocumentsTreeItem UIMyDocumentsTreeItem
        {
            get
            {
                if ((this.mUIMyDocumentsTreeItem == null))
                {
                    this.mUIMyDocumentsTreeItem = new UIMyDocumentsTreeItem(this);
                }
                return this.mUIMyDocumentsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIMyDocumentsTreeItem mUIMyDocumentsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMyDocumentsTreeItem : WinTreeItem
    {
        
        public UIMyDocumentsTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "My Documents";
            this.SearchProperties["Value"] = "5";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIVisualStudio2012TreeItem UIVisualStudio2012TreeItem
        {
            get
            {
                if ((this.mUIVisualStudio2012TreeItem == null))
                {
                    this.mUIVisualStudio2012TreeItem = new UIVisualStudio2012TreeItem(this);
                }
                return this.mUIVisualStudio2012TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIVisualStudio2012TreeItem mUIVisualStudio2012TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIVisualStudio2012TreeItem : WinTreeItem
    {
        
        public UIVisualStudio2012TreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Visual Studio 2012";
            this.SearchProperties["Value"] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIProjectsTreeItem UIProjectsTreeItem
        {
            get
            {
                if ((this.mUIProjectsTreeItem == null))
                {
                    this.mUIProjectsTreeItem = new UIProjectsTreeItem(this);
                }
                return this.mUIProjectsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIProjectsTreeItem mUIProjectsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIProjectsTreeItem : WinTreeItem
    {
        
        public UIProjectsTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Projects";
            this.SearchProperties["Value"] = "7";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIPS6TreeItem UIPS6TreeItem
        {
            get
            {
                if ((this.mUIPS6TreeItem == null))
                {
                    this.mUIPS6TreeItem = new UIPS6TreeItem(this);
                }
                return this.mUIPS6TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIPS6TreeItem mUIPS6TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIPS6TreeItem : WinTreeItem
    {
        
        public UIPS6TreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "PS6";
            this.SearchProperties["Value"] = "8";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITestFilesTreeItem UITestFilesTreeItem
        {
            get
            {
                if ((this.mUITestFilesTreeItem == null))
                {
                    this.mUITestFilesTreeItem = new UITestFilesTreeItem(this);
                }
                return this.mUITestFilesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestFilesTreeItem mUITestFilesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITestFilesTreeItem : WinTreeItem
    {
        
        public UITestFilesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "testFiles";
            this.SearchProperties["Value"] = "9";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIBadTreeItem
        {
            get
            {
                if ((this.mUIBadTreeItem == null))
                {
                    this.mUIBadTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIBadTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "bad";
                    this.mUIBadTreeItem.SearchProperties["Value"] = "10";
                    this.mUIBadTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIBadTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIBadTreeItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIBadTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIBadTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItem31_GoodssListItem UIItem31_GoodssListItem
        {
            get
            {
                if ((this.mUIItem31_GoodssListItem == null))
                {
                    this.mUIItem31_GoodssListItem = new UIItem31_GoodssListItem(this);
                }
                return this.mUIItem31_GoodssListItem;
            }
        }
        
        public UIGoodtxtListItem UIGoodtxtListItem
        {
            get
            {
                if ((this.mUIGoodtxtListItem == null))
                {
                    this.mUIGoodtxtListItem = new UIGoodtxtListItem(this);
                }
                return this.mUIGoodtxtListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIItem31_GoodssListItem mUIItem31_GoodssListItem;
        
        private UIGoodtxtListItem mUIGoodtxtListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItem31_GoodssListItem : WinListItem
    {
        
        public UIItem31_GoodssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "3.1_Good.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinControl UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchProperties[UITestControl.PropertyNames.ControlType] = "Image";
                    this.mUIItemImage.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIGoodtxtListItem : WinListItem
    {
        
        public UIGoodtxtListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "good.txt";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinControl UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchProperties[UITestControl.PropertyNames.ControlType] = "Image";
                    this.mUIItemImage.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1136";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilesoftypeComboBox
        {
            get
            {
                if ((this.mUIFilesoftypeComboBox == null))
                {
                    this.mUIFilesoftypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilesoftypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Files of type:";
                    this.mUIFilesoftypeComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilesoftypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilesoftypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINewssSpreadsheetWindow : WinWindow
    {
        
        public UINewssSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = " new.ss  -  Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add(" new.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIItem1Window UIItem1Window
        {
            get
            {
                if ((this.mUIItem1Window == null))
                {
                    this.mUIItem1Window = new UIItem1Window(this);
                }
                return this.mUIItem1Window;
            }
        }
        
        public UIMenuStripMenuBar1 UIMenuStripMenuBar
        {
            get
            {
                if ((this.mUIMenuStripMenuBar == null))
                {
                    this.mUIMenuStripMenuBar = new UIMenuStripMenuBar1(this);
                }
                return this.mUIMenuStripMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItem1Window mUIItem1Window;
        
        private UIMenuStripMenuBar1 mUIMenuStripMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItem1Window : WinWindow
    {
        
        public UIItem1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentTextBox";
            this.WindowTitles.Add(" new.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentTextBoxEdit
        {
            get
            {
                if ((this.mUIContentTextBoxEdit == null))
                {
                    this.mUIContentTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = ":";
                    this.mUIContentTextBoxEdit.WindowTitles.Add(" new.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIContentTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMenuStripMenuBar1 : WinMenuBar
    {
        
        public UIMenuStripMenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip2";
            this.WindowTitles.Add(" new.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add(" new.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenCtrlOMenuItem
        {
            get
            {
                if ((this.mUIOpenCtrlOMenuItem == null))
                {
                    this.mUIOpenCtrlOMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenCtrlOMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open          (Ctrl+O)";
                    this.mUIOpenCtrlOMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenCtrlOMenuItem.WindowTitles.Add(" new.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIOpenCtrlOMenuItem;
            }
        }
        
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As...";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add(" new.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        
        public WinMenuItem UISaveCtrlSMenuItem
        {
            get
            {
                if ((this.mUISaveCtrlSMenuItem == null))
                {
                    this.mUISaveCtrlSMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveCtrlSMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save            (Ctrl+S)";
                    this.mUISaveCtrlSMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveCtrlSMenuItem.WindowTitles.Add(" new.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUISaveCtrlSMenuItem;
            }
        }
        
        public WinMenuItem UICloseAltF4MenuItem
        {
            get
            {
                if ((this.mUICloseAltF4MenuItem == null))
                {
                    this.mUICloseAltF4MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseAltF4MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close          (Alt+F4)";
                    this.mUICloseAltF4MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseAltF4MenuItem.WindowTitles.Add(" new.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUICloseAltF4MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenCtrlOMenuItem;
        
        private WinMenuItem mUISaveAsMenuItem;
        
        private WinMenuItem mUISaveCtrlSMenuItem;
        
        private WinMenuItem mUICloseAltF4MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Context";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32768";
            #endregion
        }
        
        #region Properties
        public UIContextMenu UIContextMenu
        {
            get
            {
                if ((this.mUIContextMenu == null))
                {
                    this.mUIContextMenu = new UIContextMenu(this);
                }
                return this.mUIContextMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIContextMenu mUIContextMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIContextMenu : WinMenu
    {
        
        public UIContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Context";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIDeleteMenuItem
        {
            get
            {
                if ((this.mUIDeleteMenuItem == null))
                {
                    this.mUIDeleteMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIDeleteMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Delete";
                    #endregion
                }
                return this.mUIDeleteMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIDeleteMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDeleteFileWindow : WinWindow
    {
        
        public UIDeleteFileWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Delete File";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Delete File");
            #endregion
        }
        
        #region Properties
        public UIYesWindow1 UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow1(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow1 mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIYesWindow1 : WinWindow
    {
        
        public UIYesWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Delete File");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Delete File");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDemossSpreadsheetWindow : WinWindow
    {
        
        public UIDemossSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = " demo.ss  -  Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add(" demo.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIContentTextBoxWindow2 UIContentTextBoxWindow
        {
            get
            {
                if ((this.mUIContentTextBoxWindow == null))
                {
                    this.mUIContentTextBoxWindow = new UIContentTextBoxWindow2(this);
                }
                return this.mUIContentTextBoxWindow;
            }
        }
        
        public UIItemWindow5 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow5(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItem1Window1 UIItem1Window
        {
            get
            {
                if ((this.mUIItem1Window == null))
                {
                    this.mUIItem1Window = new UIItem1Window1(this);
                }
                return this.mUIItem1Window;
            }
        }
        
        public UIC1Window UIC1Window
        {
            get
            {
                if ((this.mUIC1Window == null))
                {
                    this.mUIC1Window = new UIC1Window(this);
                }
                return this.mUIC1Window;
            }
        }
        
        public UIMenuStripMenuBar2 UIMenuStripMenuBar
        {
            get
            {
                if ((this.mUIMenuStripMenuBar == null))
                {
                    this.mUIMenuStripMenuBar = new UIMenuStripMenuBar2(this);
                }
                return this.mUIMenuStripMenuBar;
            }
        }
        
        public UIDemossSpreadsheetTitleBar UIDemossSpreadsheetTitleBar
        {
            get
            {
                if ((this.mUIDemossSpreadsheetTitleBar == null))
                {
                    this.mUIDemossSpreadsheetTitleBar = new UIDemossSpreadsheetTitleBar(this);
                }
                return this.mUIDemossSpreadsheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIContentTextBoxWindow2 mUIContentTextBoxWindow;
        
        private UIItemWindow5 mUIItemWindow;
        
        private UIItem1Window1 mUIItem1Window;
        
        private UIC1Window mUIC1Window;
        
        private UIMenuStripMenuBar2 mUIMenuStripMenuBar;
        
        private UIDemossSpreadsheetTitleBar mUIDemossSpreadsheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIContentTextBoxWindow2 : WinWindow
    {
        
        public UIContentTextBoxWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentTextBox";
            this.WindowTitles.Add(" demo.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentTextBoxEdit
        {
            get
            {
                if ((this.mUIContentTextBoxEdit == null))
                {
                    this.mUIContentTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = ":";
                    this.mUIContentTextBoxEdit.WindowTitles.Add(" demo.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIContentTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add(" demo.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add(" demo.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItem1Window1 : WinWindow
    {
        
        public UIItem1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "valueLabel";
            this.WindowTitles.Add(" demo.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinText UIItem1Text
        {
            get
            {
                if ((this.mUIItem1Text == null))
                {
                    this.mUIItem1Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem1Text.SearchProperties[WinText.PropertyNames.Name] = "1";
                    this.mUIItem1Text.WindowTitles.Add(" demo.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIItem1Text;
            }
        }
        
        public WinText UIItem13Text
        {
            get
            {
                if ((this.mUIItem13Text == null))
                {
                    this.mUIItem13Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem13Text.SearchProperties[WinText.PropertyNames.Name] = "13";
                    this.mUIItem13Text.WindowTitles.Add(" demo.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIItem13Text;
            }
        }
        
        public WinText UIItem2Text
        {
            get
            {
                if ((this.mUIItem2Text == null))
                {
                    this.mUIItem2Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem2Text.SearchProperties[WinText.PropertyNames.Name] = "2";
                    this.mUIItem2Text.WindowTitles.Add(" demo.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIItem2Text;
            }
        }
        
        public WinText UIItem12Text
        {
            get
            {
                if ((this.mUIItem12Text == null))
                {
                    this.mUIItem12Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem12Text.SearchProperties[WinText.PropertyNames.Name] = "12";
                    this.mUIItem12Text.WindowTitles.Add(" demo.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIItem12Text;
            }
        }
        
        public WinText UIItem4Text
        {
            get
            {
                if ((this.mUIItem4Text == null))
                {
                    this.mUIItem4Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem4Text.SearchProperties[WinText.PropertyNames.Name] = "4";
                    this.mUIItem4Text.WindowTitles.Add(" demo.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIItem4Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIItem1Text;
        
        private WinText mUIItem13Text;
        
        private WinText mUIItem2Text;
        
        private WinText mUIItem12Text;
        
        private WinText mUIItem4Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIC1Window : WinWindow
    {
        
        public UIC1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellName";
            this.WindowTitles.Add(" demo.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinText UIC1Text
        {
            get
            {
                if ((this.mUIC1Text == null))
                {
                    this.mUIC1Text = new WinText(this);
                    #region Search Criteria
                    this.mUIC1Text.SearchProperties[WinText.PropertyNames.Name] = "C1";
                    this.mUIC1Text.WindowTitles.Add(" demo.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIC1Text;
            }
        }
        
        public WinText UIA2Text
        {
            get
            {
                if ((this.mUIA2Text == null))
                {
                    this.mUIA2Text = new WinText(this);
                    #region Search Criteria
                    this.mUIA2Text.SearchProperties[WinText.PropertyNames.Name] = "A2";
                    this.mUIA2Text.WindowTitles.Add(" demo.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIA2Text;
            }
        }
        
        public WinText UIB2Text
        {
            get
            {
                if ((this.mUIB2Text == null))
                {
                    this.mUIB2Text = new WinText(this);
                    #region Search Criteria
                    this.mUIB2Text.SearchProperties[WinText.PropertyNames.Name] = "B2";
                    this.mUIB2Text.WindowTitles.Add(" demo.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIB2Text;
            }
        }
        
        public WinText UIB3Text
        {
            get
            {
                if ((this.mUIB3Text == null))
                {
                    this.mUIB3Text = new WinText(this);
                    #region Search Criteria
                    this.mUIB3Text.SearchProperties[WinText.PropertyNames.Name] = "B3";
                    this.mUIB3Text.WindowTitles.Add(" demo.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUIB3Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIC1Text;
        
        private WinText mUIA2Text;
        
        private WinText mUIB2Text;
        
        private WinText mUIB3Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMenuStripMenuBar2 : WinMenuBar
    {
        
        public UIMenuStripMenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip2";
            this.WindowTitles.Add(" demo.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem2 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem2(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem2 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFileMenuItem2 : WinMenuItem
    {
        
        public UIFileMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add(" demo.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseAltF4MenuItem
        {
            get
            {
                if ((this.mUICloseAltF4MenuItem == null))
                {
                    this.mUICloseAltF4MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseAltF4MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close          (Alt+F4)";
                    this.mUICloseAltF4MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseAltF4MenuItem.WindowTitles.Add(" demo.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUICloseAltF4MenuItem;
            }
        }
        
        public WinMenuItem UINewCtrlNMenuItem
        {
            get
            {
                if ((this.mUINewCtrlNMenuItem == null))
                {
                    this.mUINewCtrlNMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewCtrlNMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New            (Ctrl+N)";
                    this.mUINewCtrlNMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewCtrlNMenuItem.WindowTitles.Add(" demo.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUINewCtrlNMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseAltF4MenuItem;
        
        private WinMenuItem mUINewCtrlNMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDemossSpreadsheetTitleBar : WinTitleBar
    {
        
        public UIDemossSpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add(" demo.ss  -  Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add(" demo.ss  -  Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
