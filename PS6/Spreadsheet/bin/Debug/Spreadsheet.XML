<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spreadsheet</name>
    </assembly>
    <members>
        <member name="T:SS.CircularException">
            <summary>
            Thrown to indicate that a change to a cell will cause a circular dependency.
            </summary>
        </member>
        <member name="T:SS.InvalidNameException">
            <summary>
            Thrown to indicate that a name parameter was either null or invalid.
            </summary>
        </member>
        <member name="T:SS.SpreadsheetReadWriteException">
            <summary>
            Thrown to indicate that a read or write attempt has failed.
            </summary>
        </member>
        <member name="M:SS.SpreadsheetReadWriteException.#ctor(System.String)">
            <summary>
            Creates the exception with a message
            </summary>
        </member>
        <member name="T:SS.AbstractSpreadsheet">
            <summary>
            An AbstractSpreadsheet object represents the state of a simple spreadsheet.  A 
            spreadsheet consists of an infinite number of named cells.
            
            A string is a cell name if and only if it consists of one or more letters,
            followed by one or more digits AND it satisfies the predicate IsValid.
            For example, "A15", "a15", "XY032", and "BC7" are cell names so long as they
            satisfy IsValid.  On the other hand, "Z", "X_", and "hello" are not cell names,
            regardless of IsValid.
            
            Any valid incoming cell name, whether passed as a parameter or embedded in a formula,
            must be normalized with the Normalize method before it is used by or saved in 
            this spreadsheet.  For example, if Normalize is s => s.ToUpper(), then
            the Formula "x3+a5" should be converted to "X3+A5" before use.
            
            A spreadsheet contains a cell corresponding to every possible cell name.  
            In addition to a name, each cell has a contents and a value.  The distinction is
            important.
            
            The contents of a cell can be (1) a string, (2) a double, or (3) a Formula.  If the
            contents is an empty string, we say that the cell is empty.  (By analogy, the contents
            of a cell in Excel is what is displayed on the editing line when the cell is selected.)
            
            In a new spreadsheet, the contents of every cell is the empty string.
             
            The value of a cell can be (1) a string, (2) a double, or (3) a FormulaError.  
            (By analogy, the value of an Excel cell is what is displayed in that cell's position
            in the grid.)
            
            If a cell's contents is a string, its value is that string.
            
            If a cell's contents is a double, its value is that double.
            
            If a cell's contents is a Formula, its value is either a double or a FormulaError,
            as reported by the Evaluate method of the Formula class.  The value of a Formula,
            of course, can depend on the values of variables.  The value of a variable is the 
            value of the spreadsheet cell it names (if that cell's value is a double) or 
            is undefined (otherwise).
            
            Spreadsheets are never allowed to contain a combination of Formulas that establish
            a circular dependency.  A circular dependency exists when a cell depends on itself.
            For example, suppose that A1 contains B1*2, B1 contains C1*2, and C1 contains A1*2.
            A1 depends on B1, which depends on C1, which depends on A1.  That's a circular
            dependency.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.#ctor(System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Constructs an abstract spreadsheet by recording its variable validity test,
            its normalization method, and its version information.  The variable validity
            test is used throughout to determine whether a string that consists of one or
            more letters followed by one or more digits is a valid cell name.  The variable
            equality test should be used thoughout to determine whether two variables are
            equal.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetSavedVersion(System.String)">
            <summary>
            Returns the version information of the spreadsheet saved in the named file.
            If there are any problems opening, reading, or closing the file, the method
            should throw a SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.Save(System.String)">
            <summary>
            Writes the contents of this spreadsheet to the named file using an XML format.
            The XML elements should be structured as follows:
            
            <spreadsheet version="version information goes here">
            
            <cell>
            <name>
            cell name goes here
            </name>
            <contents>
            cell contents goes here
            </contents>    
            </cell>
            
            </spreadsheet>
            
            There should be one cell element for each non-empty cell in the spreadsheet.  
            If the cell contains a string, it should be written as the contents.  
            If the cell contains a double d, d.ToString() should be written as the contents.  
            If the cell contains a Formula f, f.ToString() with "=" prepended should be written as the contents.
            
            If there are any problems opening, writing, or closing the file, the method should throw a
            SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellValue(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the value (as opposed to the contents) of the named cell.  The return
            value should be either a string, a double, or a SpreadsheetUtilities.FormulaError.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Enumerates the names of all the non-empty cells in the spreadsheet.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellContents(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the contents (as opposed to the value) of the named cell.  The return
            value should be either a string, a double, or a Formula.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetContentsOfCell(System.String,System.String)">
            <summary>
            If content is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if content parses as a double, the contents of the named
            cell becomes that double.
            
            Otherwise, if content begins with the character '=', an attempt is made
            to parse the remainder of content into a Formula f using the Formula
            constructor.  There are then three possibilities:
            
              (1) If the remainder of content cannot be parsed into a Formula, a 
                  SpreadsheetUtilities.FormulaFormatException is thrown.
                  
              (2) Otherwise, if changing the contents of the named cell to be f
                  would cause a circular dependency, a CircularException is thrown.
                  
              (3) Otherwise, the contents of the named cell becomes f.
            
            Otherwise, the contents of the named cell becomes content.
            
            If an exception is not thrown, the method returns a set consisting of
            name plus the names of all other cells whose value depends, directly
            or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.Double)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes number.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.String)">
            <summary>
            If text is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes text.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,SpreadsheetUtilities.Formula)">
            <summary>
            If formula parameter is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if changing the contents of the named cell to be the formula would cause a 
            circular dependency, throws a CircularException.
            
            Otherwise, the contents of the named cell becomes formula.  The method returns a
            Set consisting of name plus the names of all other cells whose value depends,
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetDirectDependents(System.String)">
            <summary>
            If name is null, throws an ArgumentNullException.
            
            Otherwise, if name isn't a valid cell name, throws an InvalidNameException.
            
            Otherwise, returns an enumeration, without duplicates, of the names of all cells whose
            values depend directly on the value of the named cell.  In other words, returns
            an enumeration, without duplicates, of the names of all cells that contain
            formulas containing name.
            
            For example, suppose that
            A1 contains 3
            B1 contains the formula A1 * A1
            C1 contains the formula B1 + A1
            D1 contains the formula B1 - C1
            The direct dependents of A1 are B1 and C1
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.Collections.Generic.ISet{System.String})">
            <summary>
            Requires that names be non-null.  Also requires that if names contains s,
            then s must be a valid non-null cell name.
            
            If any of the named cells are involved in a circular dependency,
            throws a CircularException.
            
            Otherwise, returns an enumeration of the names of all cells whose values must
            be recalculated, assuming that the contents of each cell named in names has changed.
            The names are enumerated in the order in which the calculations should be done.  
            
            For example, suppose that 
            A1 contains 5
            B1 contains 7
            C1 contains the formula A1 + B1
            D1 contains the formula A1 * C1
            E1 contains 15
            
            If A1 and B1 have changed, then A1, B1, and C1, and D1 must be recalculated,
            and they must be recalculated in either the order A1,B1,C1,D1 or B1,A1,C1,D1.
            The method will produce one of those enumerations.
            
            Please note that this method depends on the abstract GetDirectDependents.
            It won't work until GetDirectDependents is implemented correctly.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.String)">
            <summary>
            A convenience method for invoking the other version of GetCellsToRecalculate
            with a singleton set of names.  See the other version for details.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.Visit(System.String,System.String,System.Collections.Generic.ISet{System.String},System.Collections.Generic.LinkedList{System.String})">
            <summary>
            A helper for the GetCellsToRecalculate method.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Changed">
            <summary>
            True if this spreadsheet has been modified since it was created or saved                  
            (whichever happened most recently); false otherwise.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.IsValid">
            <summary>
            Method used to determine whether a string that consists of one or more letters
            followed by one or more digits is a valid variable name.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Normalize">
            <summary>
            Method used to convert a cell name to its standard form.  For example,
            Normalize might convert names to upper case.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Version">
            <summary>
            Version information
            </summary>
        </member>
        <member name="T:SS.ConnectionLiaison">
            <summary>
            
            </summary>
        </member>
        <member name="T:SS.SocketConnection">
            <summary>
            Holds a socket connection and manages the sending and reciving of messages as well as disconnects.
            </summary>
        </member>
        <member name="F:SS.SocketConnection.CallWhenDisconnected">
            <summary>
            The function that is called when the connection is lost.
            </summary>
        </member>
        <member name="F:SS.SocketConnection.directOutputTo">
            <summary>
            This delegate directs the incoming message to the appropriate place for processing.
            The SocketConnection cannot process any more incoming messages (but can received them) until this function has finished.
            </summary>
        </member>
        <member name="F:SS.SocketConnection.sock">
            <summary>
            The underlying socket.
            </summary>
        </member>
        <member name="F:SS.SocketConnection.ss">
            <summary>
            Class used for low-level sending and recieving of messages.
            </summary>
        </member>
        <member name="F:SS.SocketConnection.GagLock">
            <summary>
            As long as this object is locked, this SocketConnection will not process any more received messages (but it can still recieve them).
            </summary>
        </member>
        <member name="M:SS.SocketConnection.#ctor(System.Action{SS.SocketConnection,System.Exception},System.Action{SS.MessageReceivedFrom})">
            <summary>
            Constructor without an existing socket connection.
            </summary>
            <param name="whenMessageIsReceived">Function that is called when a message is received</param>
            <param name="whenDisconnected">Event called when the connection is lost.</param>
        </member>
        <member name="M:SS.SocketConnection.#ctor(System.Net.Sockets.Socket,System.Action{SS.SocketConnection,System.Exception},System.Action{SS.MessageReceivedFrom})">
            <summary>
            Constructor for an already existing socket connection. Begins listening for messages.
            </summary>
            <param name="sock">The underlying connection used for communication.</param>
            <param name="whenMessageIsReceived">Function that is called when a message is received</param>
            <param name="whenDisconnected">Event called when the connection is lost.</param>
        </member>
        <member name="M:SS.SocketConnection.TCPConnect(System.String,System.Int32,System.Int32,System.Action,System.Action{System.String})">
            <summary>
            Tries to connect to the given server with a limit on how long it will try. If successful, it will immediately start listening for packets.
            For the most part, this method is non stopping.
            </summary>
            <param name="host">Name of the host to connect to</param>
            <param name="port">Port number to connect to</param>
            <param name="timeOut">Number of seconds</param>
            <param name="successfullyConnected">Method to call when we successfully connect to the server.</param>
            <param name="failedToConnect">Method to call if we fail to connect to the server in the designated time frame.</param>
            <returns>Returns true if we even tried to connect to the host, or false if we already have an active connection and did not try to connect to the new host.</returns>
        </member>
        <member name="M:SS.SocketConnection.setDirectOutputTo(System.Action{SS.SocketConnection,System.Exception},System.Action{SS.MessageReceivedFrom})">
            <summary>
            Changes where the SocketConnection sends further output to.
            </summary>
            <param name="whenMessageIsReceived">Directs the incoming message to the appropriate place for processing</param>
            <param name="whenDisconnected">Event called when the connection is lost.</param>
        </member>
        <member name="M:SS.SocketConnection.receivedSomething(System.String,System.Exception,System.Object)">
            <summary>
            Function called when we receive a message.
            </summary>
            <param name="s">The message received.</param>
            <param name="e">Arbitrary exception object that may be sent by the string socket</param>
            <param name="payload">Expected to always be null.</param>
        </member>
        <member name="M:SS.SocketConnection.SendMessage(System.String,System.Action{System.Exception,System.Object})">
            <summary>
            Sends a message through the connection.
            </summary>
            <param name="p">Message to be sent. The '\n' character is automatically attached to the end of the message.</param>
            <param name="theSendCallback">The function to call when we have a result of sending the message.</param>
        </member>
        <member name="M:SS.SocketConnection.isConnected">
            <summary>
            Determines if the underlying socket is still connected.
            </summary>
            <returns>True if the socket is still connected.</returns>
        </member>
        <member name="M:SS.SocketConnection.CloseSocketConnection">
            <summary>
            Makes sure the connection to the player is closed.
            </summary>
        </member>
        <member name="F:SS.ConnectionLiaison.DEFAULT_PORT">
            <summary>
            Describes the default port this class will use, unless otherwise specified
            </summary>
        </member>
        <member name="F:SS.ConnectionLiaison.DEFAULT_ESC">
            <summary>
            The default value for the escape sequence
            </summary>
        </member>
        <member name="F:SS.ConnectionLiaison.ESC">
            <summary>
            Represents the delimiter used for parsing communications between the Spreadsheet 
            client and server. This value can adapt if the server is using a different separation character (singular)
            </summary>
        </member>
        <member name="F:SS.ConnectionLiaison.callBack">
            <summary>
            Method to call when sending something fails
            </summary>
        </member>
        <member name="M:SS.ConnectionLiaison.#ctor(System.Action{SS.SocketConnection,System.Exception},System.Action{SS.MessageReceivedFrom},System.Action{System.Exception,System.Object})">
            <summary>
            Basic constructor for a connection liaison. This will not start a connection.
            </summary>
            <param name="whenDisconnected"></param>
            <param name="whenMessageIsReceived"></param>
            <param name="whenSendingFails"></param>
        </member>
        <member name="M:SS.ConnectionLiaison.tryToConnect(System.String,System.Action,System.Action{System.String})">
            <summary>
            Attempts to connect to the specified server
            </summary>
            <param name="server">the server address (hostname+":"+port) to which you want to connect</param>
            <param name="successfulConnect">Called if we successfully connect to the server</param>
            <param name="failedToConnect">Called if unable to connect to server at all.</param>
        </member>
        <member name="M:SS.ConnectionLiaison.sendPassword(System.String)">
            <summary>
            used to send the password
            </summary>
            <param name="pw"></param>
        </member>
        <member name="M:SS.ConnectionLiaison.sendOpen(System.String)">
            <summary>
            Used to request a spreadsheet be opened
            </summary>
            <param name="spreadsheetName"></param>
        </member>
        <member name="M:SS.ConnectionLiaison.sendCreate(System.String)">
            <summary>
            used to request a spreadsheet be created and opened
            </summary>
            <param name="spreadsheetname"></param>
        </member>
        <member name="M:SS.ConnectionLiaison.sendEnter(System.Int32,System.String,System.String)">
            <summary>
            used to request a change to the official spreadsheet
            </summary>
            <param name="versionNumber"></param>
            <param name="cellName"></param>
            <param name="cellContent"></param>
        </member>
        <member name="M:SS.ConnectionLiaison.sendResync">
            <summary>
            Used to ask for the entire spreadsheet again
            </summary>
        </member>
        <member name="M:SS.ConnectionLiaison.sendUndo(System.Int32)">
            <summary>
            used to request an undo on the spreadsheet
            </summary>
            <param name="versionNumber"></param>
        </member>
        <member name="M:SS.ConnectionLiaison.sendSave(System.Int32)">
            <summary>
            Used to request the official spreadsheet be saved
            </summary>
            <param name="versionNumber"></param>
        </member>
        <member name="M:SS.ConnectionLiaison.sendDisconnect">
            <summary>
            used to request that the server disconnect. (?)
            </summary>
        </member>
        <member name="P:SS.ConnectionLiaison.hostname">
            <summary>
            Address of the server to connect to
            </summary>
        </member>
        <member name="P:SS.ConnectionLiaison.port">
            <summary>
            Describes the port this connection is using/will use
            </summary>
        </member>
        <member name="T:SS.type">
            <summary>
            Represents the type of debug message which will determine the color it displays in the debug window.
            </summary>
        </member>
        <member name="T:SS.DebugWindow">
            <summary>
            A window for displaying log messages
            </summary>
        </member>
        <member name="M:SS.DebugWindow.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SS.DebugWindow.write(SS.type,System.String)">
            <summary>
            Writes to the debug window
            </summary>
            <param name="messageType">The message type determines the highligh color the message will be logged with</param>
            <param name="message">The message to log in the debug window.</param>
        </member>
        <member name="M:SS.DebugWindow.ToLiteral(System.String)">
            <summary>
            Converts any escaped characters in the input into a seeable format like "\n"
            Borrowed from http://stackoverflow.com/questions/323640/can-i-convert-a-c-sharp-string-value-to-an-escaped-string-literal
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="F:SS.DebugWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SS.DebugWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SS.DebugWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SS.debug">
            <summary>
            Used to send log messages to the debug window.
            </summary>
        </member>
        <member name="M:SS.debug.show">
            <summary>
            Shows the debug window
            </summary>
        </member>
        <member name="M:SS.debug.hide">
            <summary>
            Hides the debug window
            </summary>
        </member>
        <member name="M:SS.debug.write(SS.type,System.String)">
            <summary>
            Writes to the debug window
            </summary>
            <param name="messageType">The message type determines the highligh color the message will be logged with</param>
            <param name="message">The message to log in the debug window.</param>
        </member>
        <member name="T:SS.MessageReceivedFrom">
            <summary>
            Only used when an actual message has been received. Contains a SocketConnection that recieved the message along with the message recieved.
            </summary>
        </member>
        <member name="F:SS.MessageReceivedFrom.connection">
            <summary>
            The SocketConnection that received the message.
            </summary>
        </member>
        <member name="F:SS.MessageReceivedFrom.message">
            <summary>
            The message received.
            </summary>
        </member>
        <member name="M:SS.MessageReceivedFrom.#ctor(SS.SocketConnection,System.String)">
            <summary>
            Stores the following parameters
            </summary>
            <param name="connection">The SocketConnection that received the message.</param>
            <param name="s">The message received.</param>
        </member>
        <member name="T:SS.Spreadsheet">
            <summary>
            Realizes AbstractSpreadsheet
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.cells">
            <summary>
            Holds a reference to all the cells on this spreadsheet with 
            the key being the cell name.
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.dg">
            <summary>
            Keeps track of the cell dependencies.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.#ctor">
            <summary>
            Creates an empty spreadsheet with default settings.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.#ctor(System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Creates an empty spreadsheet with the given properties.
            </summary>
            <param name="isValid">Determines whether or not a given string is a valid variable.</param>
            <param name="normalize">Turns a string containing a variable into a standard format.</param>
            <param name="version">Defines the version of the spreadsheet.</param>
        </member>
        <member name="M:SS.Spreadsheet.#ctor(System.String,System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Loads a spreadsheet from a file and attempts to load it with the properties given here.
            </summary>
            <param name="fileName">Path and File name of file to load.</param>
            <param name="isValid">Determines whether or not a given string is a valid variable.</param>
            <param name="normalize">Turns a string containing a variable into a standard format.</param>
            <param name="version">Defines the version of the spreadsheet.</param>
        </member>
        <member name="M:SS.Spreadsheet.initializeEmptySpreadsheet">
            <summary>
            Resets all the cells in the spreadsheet as well as the dependency graph.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Enumerates the names of all the non-empty cells in the spreadsheet.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetCellContents(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the contents (as opposed to the value) of the named cell.  The return
            value should be either a string, a double, or a Formula.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.Double)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes number.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.String)">
            <summary>
            If text is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes text.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,SpreadsheetUtilities.Formula)">
            <summary>
            If the formula parameter is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if changing the contents of the named cell to be the formula would cause a 
            circular dependency, throws a CircularException.  (No change is made to the spreadsheet.)
            
            Otherwise, the contents of the named cell becomes formula.  The method returns a
            Set consisting of name plus the names of all other cells whose value depends,
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetDirectDependents(System.String)">
            <summary>
            If name is null, throws an ArgumentNullException.
            
            Otherwise, if name isn't a valid cell name, throws an InvalidNameException.
            
            Otherwise, returns an enumeration, without duplicates, of the names of all cells whose
            values depend directly on the value of the named cell.  In other words, returns
            an enumeration, without duplicates, of the names of all cells that contain
            formulas containing name.
            
            For example, suppose that
            A1 contains 3
            B1 contains the formula A1 * A1
            C1 contains the formula B1 + A1
            D1 contains the formula B1 - C1
            The direct dependents of A1 are B1 and C1
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.removeOldDependeesFromCell(System.String)">
            <summary>
            Removes all dependees on the named cell.
            Requires Valid cell name.
            </summary>
            <param name="name">A valid name for a cell to remove the dependees of.</param>
        </member>
        <member name="M:SS.Spreadsheet.validateCellName(System.String)">
            <summary>
            A string is a valid cell name if and only if:
              (1) its first character is an underscore or a letter
              (2) its remaining characters (if any) are underscores and/or letters and/or digits. 
            If a cell name is invalid this method will throw an InvalidNameException
            </summary>
            <param name="name">the cell name to validate</param>
            <returns>The name but normalized.</returns>
        </member>
        <member name="M:SS.Spreadsheet.loadXmlSpreadsheet(System.String)">
            <summary>
            Attempts to load data from 'filename' into Spreadsheet memory, checking against
            the properties stored in the spreadsheet (isValid, Normalize, version)
            </summary>
            <param name="fileName">Path and file name to load.</param>
        </member>
        <member name="M:SS.Spreadsheet.updateCellValues(System.Collections.Generic.ISet{System.String})">
            <summary>
            Calculates and updates all the values of the given cell names.
            </summary>
            <param name="toUpdate">Ordered set of all cells to update.</param>
        </member>
        <member name="M:SS.Spreadsheet.lookup(System.String)">
            <summary>
            Returns the double value of the given variable. If the named cell does
            not have a double as a value then this throws an ArgumentException.
            </summary>
            <param name="name">Cell name to extract the value of.</param>
            <returns></returns>
        </member>
        <member name="M:SS.Spreadsheet.GetSavedVersion(System.String)">
            <summary>
            Returns the version information of the spreadsheet saved in the named file.
            If there are any problems opening, reading, or closing the file, the method
            should throw a SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.Save(System.String)">
            <summary>
            Writes the contents of this spreadsheet to the named file using an XML format.
            The XML elements should be structured as follows:
            
            <spreadsheet version="version information goes here">
            
            <cell>
              <name>
                cell name goes here
              </name>
              <contents>
                cell contents goes here
              </contents>    
            </cell>
            
            </spreadsheet>
            
            There should be one cell element for each non-empty cell in the spreadsheet.  
            If the cell contains a string, it should be written as the contents.  
            If the cell contains a double d, d.ToString() should be written as the contents.  
            If the cell contains a Formula f, f.ToString() with "=" prepended should be written as the contents.
            
            If there are any problems opening, writing, or closing the file, the method should throw a
            SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetCellValue(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the value (as opposed to the contents) of the named cell.  The return
            value should be either a string, a double, or a SpreadsheetUtilities.FormulaError.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.SetContentsOfCell(System.String,System.String)">
            <summary>
            If content is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if content parses as a double, the contents of the named
            cell becomes that double.
            
            Otherwise, if content begins with the character '=', an attempt is made
            to parse the remainder of content into a Formula f using the Formula
            constructor.  There are then three possibilities:
            
              (1) If the remainder of content cannot be parsed into a Formula, a 
                  SpreadsheetUtilities.FormulaFormatException is thrown.
                  
              (2) Otherwise, if changing the contents of the named cell to be f
                  would cause a circular dependency, a CircularException is thrown.
                  
              (3) Otherwise, the contents of the named cell becomes f.
            
            Otherwise, the contents of the named cell becomes content.
            
            If an exception is not thrown, the method returns a set consisting of
            name plus the names of all other cells whose value depends, directly
            or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="P:SS.Spreadsheet.Changed">
            <summary>
            True if this spreadsheet has been modified since it was created or saved                  
            (whichever happened most recently); false otherwise.
            </summary>
        </member>
        <member name="T:SS.Spreadsheet.cType">
            <summary>
            Used to describe the type of the content or value.
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.cType.str">
            <summary>
            string type
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.cType.dbl">
            <summary>
            double type
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.cType.fa">
            <summary>
            Formula type
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.cType.fe">
            <summary>
            FormualError type
            </summary>
        </member>
        <member name="T:SS.Spreadsheet.Cell">
            <summary>
            A simple container class. Relinquishes all functionality to 
            the Spreadsheet class which contains it.
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.Cell.conType">
            <summary>
            Describes the type of content stored.
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.Cell.content">
            <summary>
            Holds the content of a cell. Must be a double,
            string, or Formula type.
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.Cell.valType">
            <summary>
            Describes the type of value stored
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.Cell.value">
            <summary>
            Holds the value of a cell. Must be a stirng, 
            double, or FormulaError.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.Cell.#ctor">
            <summary>
            Constructs an empty cell.
            </summary>
        </member>
    </members>
</doc>
